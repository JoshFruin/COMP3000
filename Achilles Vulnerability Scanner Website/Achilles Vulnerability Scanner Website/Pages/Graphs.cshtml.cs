using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using MySql.Data.MySqlClient;
//using System.Web.Helpers;


namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class GraphsModel : PageModel
    {
        private readonly ILogger<GraphsModel> _logger;

        public GraphsModel(ILogger<GraphsModel> logger)
        {
            _logger = logger;
        }

        public List<QSData> QuickData { get; set; }
        public List<DSData> DiscoData { get; set; }
        public List<OSDataList> AllOSData { get; set; }
        public List<OSDataList> OSData { get; set; }
        public List<OSDataList> OutData { get; set; }
        public List<VulnData> VSData { get; set; }

        public class QSData
        {
            public string QSID { get; set; }
            public string ScanIP { get; set; }
            public string ScanVendor { get; set; }
            public string ScanOS { get; set; }
            public string ScanMAC { get; set; }
            public string ScanHostname { get; set; }
            public string ScanPorts { get; set; }
            public string ScanPortServices { get; set; }
            public string ClosedPorts { get; set; }
            public string ScanCompletionTime { get; set; }
        }
        public class DSData
        {
            public string DiscoID { get; set; }
            public string ScanIP { get; set; }
            public string ScanVendor { get; set; }
            public string ScanMAC { get; set; }
            public string ScanHostname { get; set; }
            public string ScanPorts { get; set; }
            public string ScanCompletionTime { get; set; }
        }
        public class OSDataList
        {
            public string OSID { get; set; }
            public string ScanIP { get; set; }
            public string ScanVendor { get; set; }
            public string ScanOS { get; set; }
            public string IsOSOutdated { get; set; }
            public string ScanMAC { get; set; }
            public string ScanHostname { get; set; }
            public string ScanPorts { get; set; }
            public string ScanCompletionTime { get; set; }
        }
        public class VulnData
        {
            public string VSID { get; set; }
            public string ScanIP { get; set; }
            public string ScannedVulnerabilities { get; set; }
            public string ScannedKey { get; set; }
            public string ScannedKeyState { get; set; }
            public string ScanVendor { get; set; }
            public string ScanMAC { get; set; }
            public string ScanHostname { get; set; }
            public string ScanPorts { get; set; }
            public string ScanPortServices { get; set; }
            public string ClosedPorts { get; set; }
            public string ScanCompletionTime { get; set; }
        }

        public JsonResult OnGet()
        {          
            OnPost();

            //List<OSDataList> NoOfOS = new List<OSDataList>();

            using (MySqlConnection conn = new MySqlConnection("server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;"))
            {
                conn.Open();
                using (MySqlCommand cmd = new MySqlCommand("SELECT ScanOS, IsOSOutdated FROM scannerdbmk3.oscandata", conn))
                using (var reader = cmd.ExecuteReader())
                {
                    OSData = new List<OSDataList>();
                    while (reader.Read())
                    {
                        OSData.Add(new OSDataList()
                        {
                            ScanOS = reader["ScanOS"].ToString(),
                        });
                    }
                }
                using (MySqlCommand cmd = new MySqlCommand("SELECT ScanOS, IsOSOutdated FROM scannerdbmk3.oscandata", conn))
                using (var reader = cmd.ExecuteReader())
                {
                    OutData = new List<OSDataList>();
                    while (reader.Read())
                    {
                        OutData.Add(new OSDataList()
                        {
                            IsOSOutdated = reader["IsOSOutdated"].ToString(),
                        });
                    }
                }
            }

            return new JsonResult(new { OS = OSData, outdated = OutData });
            //var data = _context.Students
            //   .GroupBy(_ => _.School)
            //   .Select(g => new {
            //       Name = g.Key,
            //       Count = g.Count()
            //   })
            //   .OrderByDescending(cp => cp.Count)
            //   .ToList();

            //foreach (var item in data)
            //{
            //    studentsInSchool.Add(new SchoolCount()
            //    {
            //        Name = item.Name,
            //        Count = item.Count
            //    });
            //}

            //ChartData = studentsInSchool;

            //var OSChart = new System.Web.Helpers.Chart(width: 600, height: 400)
            //    .AddTitle("Operating Systems on the network")
            //    .AddSeries(
            //        name: "OS",
            //        xValue: OSData, xField: "ScanOS",
            //        yValues: OSData, yFields: "IsOSOutdated")
            //    .Write();
        }

        //[WebMethod]
        //public static List<object> GetOSChartData()
        //{
        //    //List<object> OSChartData = new List<object>();
        //    //OSChartData.Add(new object[]
        //    //{
        //    // "ScanVendor", "ScanOS","IsOSOutdated"
        //    //});
        //    using (MySqlConnection conn = new MySqlConnection("server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;"))
        //    {
        //        try
        //        {
        //            conn.Open();

        //            using (MySqlCommand cmd = new MySqlCommand("SELECT ScanVendor, ScanOS, IsOSOutdated FROM scannerdbmk3.oscandata", conn))
        //            using (var reader = cmd.ExecuteReader())
        //            {
        //                OSData = new List<OSDataList>();
        //                while (reader.Read())
        //                {
        //                    //OSChartData.Add(new object[]
        //                    OSData.Add(new OSDataList()
        //                    {
        //                        //reader["ScanVendor"], reader["ScanOS"], reader["IsOSOutdated"]
        //                        //ScanVendor = reader["ScanVendor"].ToString(),
        //                        //ScanOS = reader["ScanOS"].ToString(),
        //                        //IsOSOutdated = reader["IsOSOutdated"].ToString(),
        //                    });
        //                }
        //            }
        //            conn.Close();
        //            return OSChartData;
        //        }

        //        catch (Exception ex)
        //        {
        //            throw ex;
        //        }
        //    }
        //}

        public IActionResult OnPost()
        {

            using (MySqlConnection conn = new MySqlConnection("server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;"))
            {
                try
                {
                    conn.Open();

                    using (MySqlCommand cmd = new MySqlCommand("SELECT * FROM scannerdbmk3.quickscandata", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        QuickData = new List<QSData>();
                        while (reader.Read())
                        {
                            QuickData.Add(new QSData()
                            {
                                QSID = reader["QSID"].ToString(),
                                ScanIP = reader["ScanIP"].ToString(),
                                ScanVendor = reader["ScanVendor"].ToString(),
                                ScanOS = reader["ScanOS"].ToString(),
                                ScanMAC = reader["ScanMAC"].ToString(),
                                ScanHostname = reader["ScanHostname"].ToString(),
                                ScanPorts = reader["ScanPorts"].ToString(),
                                ClosedPorts = reader["ClosedPorts"].ToString(),
                                ScanCompletionTime = reader["ScanCompletionTime"].ToString(),
                            });
                        }
                    }

                    using (MySqlCommand cmd = new MySqlCommand("SELECT * FROM scannerdbmk3.discoscandata", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        DiscoData = new List<DSData>();
                        while (reader.Read())
                        {
                            DiscoData.Add(new DSData()
                            {
                                DiscoID = reader["DiscoID"].ToString(),
                                ScanIP = reader["ScanIP"].ToString(),
                                ScanVendor = reader["ScanVendor"].ToString(),
                                ScanMAC = reader["ScanMAC"].ToString(),
                                ScanHostname = reader["ScanHostname"].ToString(),
                                ScanPorts = reader["ScanPorts"].ToString(),
                                ScanCompletionTime = reader["ScanCompletionTime"].ToString(),
                            });
                        }
                    }
                    using (MySqlCommand cmd = new MySqlCommand("SELECT * FROM scannerdbmk3.oscandata", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        AllOSData = new List<OSDataList>();
                        while (reader.Read())
                        {
                            AllOSData.Add(new OSDataList()
                            {
                                OSID = reader["OSID"].ToString(),
                                ScanIP = reader["ScanIP"].ToString(),
                                ScanVendor = reader["ScanVendor"].ToString(),
                                ScanOS = reader["ScanOS"].ToString(),
                                IsOSOutdated = reader["IsOSOutdated"].ToString(),
                                ScanMAC = reader["ScanMAC"].ToString(),
                                ScanHostname = reader["ScanHostname"].ToString(),
                                ScanPorts = reader["ScanPorts"].ToString(),
                                ScanCompletionTime = reader["ScanCompletionTime"].ToString(),
                            });
                        }
                    }

                    //using (MySqlCommand cmd = new MySqlCommand("SELECT ScanOS, IsOSOutdated FROM scannerdbmk3.oscandata", conn))
                    //using (var reader = cmd.ExecuteReader())
                    //{
                    //    OSData = new List<OSDataList>();
                    //    while (reader.Read())
                    //    {
                    //        OSData.Add(new OSDataList()
                    //        {
                    //            ScanOS = reader["ScanOS"].ToString(),
                    //            IsOSOutdated = reader["IsOSOutdated"].ToString(),
                    //        });
                    //    }
                    //}

                    using (MySqlCommand cmd = new MySqlCommand("SELECT * FROM scannerdbmk3.vulnscandata", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        VSData = new List<VulnData>();
                        while (reader.Read())
                        {
                            VSData.Add(new VulnData()
                            {
                                VSID = reader["VSID"].ToString(),
                                ScanIP = reader["ScanIP"].ToString(),
                                ScannedKey = reader["ScannedKey"].ToString(),
                                ScannedKeyState = reader["ScannedKeyState"].ToString(),
                                ScanVendor = reader["ScanVendor"].ToString(),
                                ScanMAC = reader["ScanMAC"].ToString(),
                                ScanHostname = reader["ScanHostname"].ToString(),
                                ScanPorts = reader["ScanPorts"].ToString(),
                                ClosedPorts = reader["ClosedPorts"].ToString(),
                                ScanCompletionTime = reader["ScanCompletionTime"].ToString(),
                            });
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return RedirectToPage("./Graphs");
        }
    }
}
