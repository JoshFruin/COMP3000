using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using MySql.Data.MySqlClient;
using Newtonsoft.Json.Linq;
using RestSharp;
using System.Data;
using System.Diagnostics;
using System.Net;
using System.Xml;
using System.Xml.Linq;

namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class ScanModel : PageModel
    {
        [BindProperty]
        public RetScanModel ScanData { get; set; }

        public List<SelectListItem>? ListScan { get; set; }
        public void OnGet()
        {
            ListScan = new List<SelectListItem>
                 {
                   new SelectListItem { Value = "1", Text = "Quick Scan"},
                   new SelectListItem { Value = "2", Text = "Discovery Scan"},
                   new SelectListItem { Value = "3", Text = "OS Scan"},
                   new SelectListItem { Value = "4", Text = "Vulnerability Scan"},
                   //new SelectListItem { Value = "5", Text = "Malware Scan"}
                 };
            //PlatformList = new List<SelectListItem>
            //     {
            //       new SelectListItem { Value = "W", Text = "Windows"},
            //       new SelectListItem { Value = "M", Text = "Mac"},
            //       new SelectListItem { Value = "L", Text = "Linux"}
            //     };
        }
        public class RetScanModel
        {
            public int ScanValue { get; set; }    
            public string IPValue { get; set; }
        }

        public IActionResult OnPost()
        {
            //Variables to parse data to database
            string ScanIP = "";
            string ScanOS = ""; 
            string ScanMac = "";
            string ScanHostname = "";
            string ScanPorts = "";
            string[] ScanPortsArray = new string[0]; ;
            string ExtraScanPorts = "";
            string ScanPortServices = "";
            string ScanCompletionTime = "";
            string ScanVendor = "";
            string ScanOSFamily = "";
            string ScanTCPSeq = "";
            string ScanVuln = "";
            string ScanKey = "";
            string ScanKeyState = "";
            //int VendorVulnScore = 0;
            //int OSVulnScore = 0;
            decimal VulnScore = 0;
            List<string> IPList = new List<string>();
            List<string> OSList = new List<string>();
            List<string> MacList = new List<string>();
            List<string> HostNameList = new List<string>();
            List<string> portList = new List<string>();
            List<List<string>> NestedPortList = new List<List<string>>();

            string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
            //Server=localhost\SQLEXPRESS03;Database=master;Trusted_Connection=True;
            
            MySqlConnection conn = new MySqlConnection(constring);

            switch (ScanData.ScanValue)
            {
                case 1:
                    //Concatenates the data to be one solid command for the command prompt
                    string QuickScan = "/C nmap -A -F -oX QSresults.xml  ";
                    string QScmd = string.Concat(QuickScan, ScanData.IPValue);

                    Process process = new Process();
                    ProcessStartInfo startInfo = new ProcessStartInfo();
                    startInfo.WindowStyle = ProcessWindowStyle.Hidden; //Change to normal for debugging
                    startInfo.FileName = "cmd.exe";
                    startInfo.Arguments = QScmd;
                    process.StartInfo = startInfo;
                    process.Start();
                    process.WaitForExit(); //Waits until the nmap scan is done
                                           
                    //Loads the xml document that the nmap output was sent to
                    XDocument QSxmlDoc = XDocument.Load("QSresults.xml");

                    var QShosts = QSxmlDoc.Root.Elements("host");
                    var QSporta = QSxmlDoc.Root.Elements("ports");
                    var QSportb = QSxmlDoc.Root.Elements("port");
                    var QSOSs = QSxmlDoc.Root.Elements("os");
                    var QSrunstatsa = QSxmlDoc.Root.Elements("runstats");
                    
                    XmlDocument QSxdoc = new XmlDocument();
                    QSxdoc.Load(@"QSResults.xml");

                    //Defines the nodes/elements to loop through
                    XmlElement QSxelRoot = QSxdoc.DocumentElement;
                    XmlNodeList QSxnlNodes = QSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList QSportsNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList QSportNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports/port");
                    XmlNodeList QSExtraPortsNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports/extraports");

                    foreach (XmlNode QSxndNode in QSxnlNodes)
                    {
                        //Loops through the data on the xml document then parses any relevant data to the database
                        foreach (XElement hostElement in QSxmlDoc.Descendants("host"))
                        {
                            //Gets the XElement "address" that have the attribute "addrtype" set to "ScanIP"
                            XElement QSScannedIP = (from addressElement in hostElement.Elements("address")
                                                  where addressElement.Attribute("addrtype").Value == "ipv4"
                                                  select addressElement).Single();
                            // Gets the XElement "address" that have the attribute "addrtype" set to "mac"
                            XElement QSScannedMac = (from addressElement in hostElement.Elements("address")
                                                     where addressElement.Attribute("addrtype") != null && addressElement.Attribute("addrtype").Value == "mac"
                                                     select addressElement).FirstOrDefault();                                            

                            //var addrIpv4 = QSScannedIP.Attribute("addr").Value;
                            ScanIP = QSScannedIP.Attribute("addr").Value;
                            if (QSScannedMac != null)
                            {
                                ScanMac = QSScannedMac.Attribute("addr").Value;
                            }
                            else
                            {
                                ScanMac = "Null";
                            }
                            //var addrVendor = "";
                            if (QSScannedMac != null && QSScannedMac.Attribute("vendor") != null)
                            {
                                ScanVendor = QSScannedMac.Attribute("vendor").Value;
                            }
                            else
                            {
                                ScanVendor = "Null";
                            }

                            foreach (XElement osElement in hostElement.Elements("os"))
                            {
                                XElement QSScannedOS = (from addressElement in osElement.Elements("osmatch")
                                                        where addressElement.Attribute("name") != null && addressElement.Attribute("name").Value != "embedded" 
                                                        select addressElement).FirstOrDefault();
                                /*&& addressElement.Attribute("name").Value == addrVendor*/
                                if (QSScannedOS != null)
                                {
                                    ScanOS = QSScannedOS.Attribute("name").Value;
                                }
                                else
                                {
                                    ScanOS = "Could not find OS";
                                }
                            }

                            if (ScanVendor == null && ScanOS.Contains("Microsoft"))
                            {
                                ScanVendor = "Microsoft";
                            }

                            var ScannedHostname = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") == null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                            ScanHostname = ScannedHostname;
                            if (ScannedHostname == "")
                            {
                                ScanHostname = "Missing Hostname";
                            }
                            else
                            {
                                ScanHostname = ScannedHostname;
                            }

                            var ScannedPorts = (from portElement in hostElement.Element("ports").Elements("port")
                                                select portElement.Attribute("portid").Value).ToList();
                            if (ScannedPorts.Count <= 0)
                            {
                                ScanPorts = "Unknown";
                            }
                            else
                            {
                                ScanPorts = string.Join(", ", ScannedPorts);
                            }

                            XElement QSScannedExtraPorts = (from addressElement in hostElement.Descendants("extraports")
                                                            where addressElement.Attribute("count") != null && addressElement.Attribute("state").Value == "closed"
                                                            select addressElement).FirstOrDefault();
                            if (QSScannedExtraPorts == null)
                            {
                                ExtraScanPorts = "Could not detect any closed ports";
                            }
                            else
                            {
                                ExtraScanPorts = QSScannedExtraPorts.Attribute("count").Value;
                            }

                            var ScanCompTime = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/runstats/finished") == null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("//nmaprun/runstats/finished")).GetAttribute("timestr");
                            ScanCompletionTime = ScanCompTime;

                            decimal VScore = SearchNIST(ScanVendor, ScanOS, VulnScore);

                            //Split these

                            Console.WriteLine(VScore);

                            //Command for the SQL query to insert parsed data into the MySQL database
                            var QScmdString = "INSERT INTO scannerdbmk3.quickscandata(ScanIP, ScanVendor, ScanOS, ScanMAC, ScanHostname, ScanPorts, ClosedPorts, ScanCompletionTime, VulnerabilityScore) " +
                                    "VALUES(@ScanIP, @ScanVendor, @ScanOS, @ScanMAC, @ScanHostname, @ScanPorts, @ClosedPorts, @ScanCompletionTime, @VulnerabilityScore)";
                            using (MySqlCommand command = new MySqlCommand(QScmdString, conn))
                            {
                                //Parsed values are inserted into the database if an error occurs the user will get an error
                                try
                                {
                                    command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                    command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    command.Parameters.AddWithValue("@VulnerabilityScore", VScore);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }
                                catch (Exception ex)
                                {
                                    //Perhaps do a pop-up in case any errors occur?
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }

                            }
                        }
                    }

                    break;

                case 2:
                    string DiscoScan = "/C nmap -F -oX DSResults.xml ";
                    string DScmd = string.Concat(DiscoScan, ScanData.IPValue);

                    System.Diagnostics.Process DSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo DSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    DSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    DSstartInfo.FileName = "cmd.exe";
                    DSstartInfo.Arguments = DScmd;
                    DSprocess.StartInfo = DSstartInfo;
                    DSprocess.Start();
                    DSprocess.WaitForExit();    //Waits until the nmap scan is done
                                                
                    XDocument xmlDoc = XDocument.Load("DSResults.xml");
                    var hosts = xmlDoc.Root.Elements("host");
                    var porta = xmlDoc.Root.Elements("ports");
                    var portb = xmlDoc.Root.Elements("port");
                    var runstatsa = xmlDoc.Root.Elements("runstats");
                    XmlDocument xdoc = new XmlDocument();
                    xdoc.Load(@"DSResults.xml");

                    XmlElement xelRoot = xdoc.DocumentElement;
                    XmlNodeList xnlNodes = xelRoot.SelectNodes("/nmaprun");
                    XmlNodeList portsNodes = xelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList portNodes = xelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode xndNode in xnlNodes)
                    {
                        foreach (XElement hostElement in xmlDoc.Descendants("host"))
                        {
                            //Gets the XElement "address" that have the attribute "addrtype" sets it to "ipv4"
                            XElement ScannedIP = (from addressElement in hostElement.Elements("address")
                                                  where addressElement.Attribute("addrtype").Value == "ipv4"
                                                  select addressElement).Single();
                            // Gets the XElement "address" that have the attribute "addrtype" sets it to "mac"
                            XElement ScannedMac = (from addressElement in hostElement.Elements("address")
                                                   where addressElement.Attribute("addrtype") != null && addressElement.Attribute("addrtype").Value == "mac"
                                                   select addressElement).FirstOrDefault();

                            ScanIP = ScannedIP.Attribute("addr").Value;
                            if (ScannedMac != null)
                            {
                                ScanMac = ScannedMac.Attribute("addr").Value;
                            }
                            else
                            {
                                ScanMac = "Null";
                            }
                            var addrVendor = "";
                            if (ScannedMac != null && ScannedMac.Attribute("vendor") != null)
                            {
                                addrVendor = ScannedMac.Attribute("vendor").Value;
                            }
                            else
                            {
                                addrVendor = "Null";
                            }
                            var ScannedPorts = (from portElement in hostElement.Element("ports").Elements("port")
                                     select portElement.Attribute("portid").Value).ToList();
                            if (ScannedPorts.Count <= 0)
                            {
                                ScanPorts = "Unknown";
                            }
                            else
                            {
                                ScanPorts = string.Join(", ", ScannedPorts);
                            }

                            var ScannedHostname = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                            if (ScannedHostname == "")
                            {
                                ScanHostname = "Missing Hostname";
                            }
                            else
                            {
                                ScanHostname = ScannedHostname;
                            }


                            var ScanCompTime = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/runstats/finished") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("//nmaprun/runstats/finished")).GetAttribute("timestr");
                            ScanCompletionTime = ScanCompTime;

                            var cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanVendor, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) VALUES(@ScanIP, @ScanVendor, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                            using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                            {

                                try
                                {
                                    command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScanVendor", addrVendor);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }

                            }
                        }
                    }

                    break;

                case 3:
                    string OSScan = "/C nmap -A -sV -T4 -oX OSResults.xml ";
                    string OScmd = string.Concat(OSScan, ScanData.IPValue);

                    System.Diagnostics.Process OSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo OSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    OSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    OSstartInfo.FileName = "cmd.exe";
                    OSstartInfo.Arguments = OScmd;
                    OSprocess.StartInfo = OSstartInfo;
                    OSprocess.Start();
                    OSprocess.WaitForExit();

                    XDocument OSxmlDoc = XDocument.Load("OSResults.xml");

                    var OShosts = OSxmlDoc.Root.Elements("host");
                    var OSporta = OSxmlDoc.Root.Elements("ports");
                    var OSportb = OSxmlDoc.Root.Elements("port");
                    var OSrunstatsa = OSxmlDoc.Root.Elements("runstats");
                    XmlDocument OSxdoc = new XmlDocument();

                    //Perhaps if OS is outdated recommend that the uprades to the latest OS?

                    OSxdoc.Load(@"OSResults.xml");

                    XmlElement OSxelRoot = OSxdoc.DocumentElement;
                    XmlNodeList OSxnlNodes = OSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList OSportsNodes = OSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList OSportNodes = OSxelRoot.SelectNodes("/nmaprun/host/ports/port");
                    string IsOSOutdated = "";

                    foreach (XmlNode OSxndNode in OSxnlNodes)
                    {

                        foreach (XElement hostElement in OSxmlDoc.Descendants("host"))
                        {
                            //Gets the XElement "address" that have the attribute "addrtype" set to "ipv4"
                            XElement OSScannedIP = (from addressElement in hostElement.Elements("address")
                                                  where addressElement.Attribute("addrtype").Value == "ipv4"
                                                  select addressElement).Single();
                            // Gets the XElement "address" that have the attribute "addrtype" set to "mac"
                            XElement OSScannedMac = (from addressElement in hostElement.Elements("address")
                                                   where addressElement.Attribute("addrtype") != null && addressElement.Attribute("addrtype").Value == "mac"
                                                   select addressElement).FirstOrDefault();

                            ScanIP = OSScannedIP.Attribute("addr").Value;
                            if (OSScannedMac != null)
                            {
                                ScanMac = OSScannedMac.Attribute("addr").Value;
                            }
                            else
                            {
                                ScanMac = "Null";
                            }
                            if (OSScannedMac != null && OSScannedMac.Attribute("vendor") != null)
                            {
                                ScanVendor = OSScannedMac.Attribute("vendor").Value;
                            }
                            else
                            {
                                ScanVendor = "Null";
                            }

                            foreach (XElement osElement in hostElement.Elements("os"))
                            {
                                XElement OSScannedOS = (from addressElement in osElement.Elements("osmatch")
                                                        where addressElement.Attribute("name") != null && addressElement.Attribute("name").Value != "embedded"
                                                        select addressElement).FirstOrDefault();
                                /*&& addressElement.Attribute("name").Value == addrVendor*/
                                if (OSScannedOS != null)
                                {
                                    ScanOS = OSScannedOS.Attribute("name").Value;
                                }
                                else
                                {
                                    ScanOS = "Could not find OS";
                                }

                                if (ScanOS.Contains("Microsoft Windows 11") || ScanOS.Contains("Apple macOS 10.13 (High Sierra) - 10.15 (Catalina) or iOS 11.0 - 13.4 (Darwin 17.0.0 - 19.2.0)"))
                                {
                                    IsOSOutdated = "Up to date";
                                }
                                else if(ScanOS.Contains("Microsoft Windows 10") || ScanOS.Contains("Apple Mac OS X 10.7.0 (Lion) - 10.12 (Sierra) or iOS 4.1 - 9.3.3 (Darwin 10.0.0 - 16.4.0)"))
                                {
                                    IsOSOutdated = "May become outdated soon";
                                }
                                else
                                {
                                    IsOSOutdated = "Outdated or unknown!";
                                }
                                //XElement OSScannedOSFam = (from addressElement in hostElement.Elements("osclass")
                                //                           where addressElement.Attribute("osfamily") != null
                                //                           select addressElement).FirstOrDefault();
                            }
                            var OSScannedPorts = (from portElement in hostElement.Element("ports").Elements("port")
                                                select portElement.Attribute("portid").Value).ToList();
                            if (OSScannedPorts.Count <= 0)
                            {
                                ScanPorts = "Unknown";
                            }
                            else
                            {
                                ScanPorts = string.Join(", ", OSScannedPorts);
                            }

                            var OSScannedHostname = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                            if (OSScannedHostname == "")
                            {
                                ScanHostname = "Missing Hostname";
                            }
                            else
                            {
                                ScanHostname = OSScannedHostname;
                            }

                            decimal VScore = SearchNIST(ScanVendor, ScanOS, VulnScore);

                            var ScanCompTime = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/runstats/finished") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("//nmaprun/runstats/finished")).GetAttribute("timestr");
                            ScanCompletionTime = ScanCompTime;

                            var cmdString = "INSERT INTO scannerdbmk3.OScandata(ScanIP, ScanVendor, ScanOS, IsOSOutdated, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime, VulnerabilityScore) " +
                            "VALUES(@ScanIP, @ScanVendor, @ScanOS, @IsOSOutdated, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime, @VulnerabilityScore)";
                            using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                            {

                                try
                                {
                                    command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                    command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                    command.Parameters.AddWithValue("@IsOSOutdated", IsOSOutdated);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    //command.Parameters.AddWithValue("@ScanTCPSeq", ScanTCPSeq);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    command.Parameters.AddWithValue("@VulnerabilityScore", VScore);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }
                            }
                        }                           
                    }

                    break;

                case 4:
                    string VulnScan = "/C nmap --script vuln -T4 -oX VSResults.xml ";
                    string Vulncmd = string.Concat(VulnScan, ScanData.IPValue);

                    System.Diagnostics.Process Vulnprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo VulnstartInfo = new System.Diagnostics.ProcessStartInfo();
                    VulnstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    VulnstartInfo.FileName = "cmd.exe";
                    VulnstartInfo.Arguments = Vulncmd;
                    Vulnprocess.StartInfo = VulnstartInfo;
                    Vulnprocess.Start();
                    Vulnprocess.WaitForExit();

                    XDocument VSxmlDoc = XDocument.Load("VSResults.xml");

                    var VShosts = VSxmlDoc.Root.Elements("host");
                    var VSporta = VSxmlDoc.Root.Elements("ports");
                    var VSportb = VSxmlDoc.Root.Elements("port");
                    var VSrunstatsa = VSxmlDoc.Root.Elements("runstats");
                    XmlDocument VSxdoc = new XmlDocument();

                    VSxdoc.Load(@"VSResults.xml");

                    XmlElement VSxelRoot = VSxdoc.DocumentElement;
                    XmlNodeList VSxnlNodes = VSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList VSportsNodes = VSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList VSportNodes = VSxelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode VSxndNode in VSxnlNodes)
                    {
                        foreach (XElement hostElement in VSxmlDoc.Descendants("host"))
                        {
                            //Gets the XElement "address" that have the attribute "addrtype" set to "ScanIP"
                            XElement VSScannedIP = (from addressElement in hostElement.Elements("address")
                                                    where addressElement.Attribute("addrtype").Value == "ipv4"
                                                    select addressElement).Single();
                            // Gets the XElement "address" that have the attribute "addrtype" set to "mac"
                            XElement VSScannedMac = (from addressElement in hostElement.Elements("address")
                                                     where addressElement.Attribute("addrtype") != null && addressElement.Attribute("addrtype").Value == "mac"
                                                     select addressElement).FirstOrDefault();

                            //var addrIpv4 = QSScannedIP.Attribute("addr").Value;
                            ScanIP = VSScannedIP.Attribute("addr").Value;
                            if (VSScannedMac != null)
                            {
                                ScanMac = VSScannedMac.Attribute("addr").Value;
                            }
                            else
                            {
                                ScanMac = "Null";
                            }
                            //var addrVendor = "";
                            if (VSScannedMac != null && VSScannedMac.Attribute("vendor") != null)
                            {
                                ScanVendor = VSScannedMac.Attribute("vendor").Value;
                            }
                            else
                            {
                                ScanVendor = "Null";
                            }

                            XElement QSScannedExtraPorts = (from addressElement in hostElement.Descendants("extraports")
                                                            where addressElement.Attribute("count") != null && addressElement.Attribute("state").Value == "closed"
                                                            select addressElement).FirstOrDefault();
                            if (QSScannedExtraPorts == null)
                            {
                                ExtraScanPorts = "Could not detect any closed ports";
                            }
                            else
                            {
                                ExtraScanPorts = QSScannedExtraPorts.Attribute("count").Value;
                            }

                            XElement ScannedKey = (from addressElement in hostElement.Descendants("elem")
                                                   where addressElement.Attribute("key") != null && addressElement.Attribute("key").Value == "title"
                                                   select addressElement).FirstOrDefault();

                            if (ScannedKey == null)
                            {
                                ScanKey = "Could not detect any keys";
                            }
                            else
                            {
                                ScanKey = ScannedKey.Value;
                            }

                            XElement ScannedKeyState = (from addressElement in hostElement.Descendants("elem")
                                                        where addressElement.Attribute("key") != null && addressElement.Attribute("key").Value == "state"
                                                        select addressElement).FirstOrDefault();

                            if (ScannedKeyState == null)
                            {
                                ScanKeyState = "Could not detect the state of the key";
                            }
                            else
                            {
                                ScanKeyState = ScannedKeyState.Value;
                            }

                            var VSScannedHostname = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                            if (VSScannedHostname == "")
                            {
                                ScanHostname = "Missing Hostname";
                            }
                            else
                            {
                                ScanHostname = VSScannedHostname;
                            }

                            var ScannedPorts = (from portElement in hostElement.Element("ports").Elements("port")
                                                select portElement.Attribute("portid").Value).ToList();
                            if (ScannedPorts.Count <= 0)
                            {
                                ScanPorts = "Unknown";
                            }
                            else
                            {
                                ScanPorts = string.Join(", ", ScannedPorts);
                            }

                            decimal VScore = SearchNIST(ScanVendor, ScanOS, VulnScore);

                            var ScanCompTime = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/runstats/finished") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("//nmaprun/runstats/finished")).GetAttribute("timestr");
                            ScanCompletionTime = ScanCompTime;
                            //Command for the SQL query to insert parsed data into the MySQL database
                            var cmdString = "INSERT INTO scannerdbmk3.vulnscandata(ScanIP,  ScannedKey, ScannedKeyState, ScanVendor, ScanMAC, ScanHostname, ScanPorts, ClosedPorts, ScanCompletionTime, VulnerabilityScore) " +
                            "VALUES(@ScanIP, @ScannedKey, @ScannedKeyState, @ScanVendor, @ScanMAC, @ScanHostname, @ScanPorts, @ClosedPorts, @ScanCompletionTime, @VulnerabilityScore)";
                            using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                            {

                                try
                                {
                                    command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScannedKey", ScanKey);
                                    command.Parameters.AddWithValue("@ScannedKeyState", ScanKeyState);
                                    command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    command.Parameters.AddWithValue("@VulnerabilityScore", VScore);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }

                                catch (Exception ex)
                                {
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }

                            }
                        }
                    }

                    break;

                case 5:
                    string MalScan = "/C nmap nmap --script malware -T4 -oX MSresults.xml ";
                    string Malcmd = string.Concat(MalScan, ScanData.IPValue);

                    System.Diagnostics.Process Malprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo MalstartInfo = new System.Diagnostics.ProcessStartInfo();
                    MalstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    MalstartInfo.FileName = "cmd.exe";
                    MalstartInfo.Arguments = Malcmd;
                    Malprocess.StartInfo = MalstartInfo;
                    Malprocess.Start();
                    Malprocess.WaitForExit();

                    XDocument MSxmlDoc = XDocument.Load("MSResults.xml");

                    var MShosts = MSxmlDoc.Root.Elements("host");
                    var MSporta = MSxmlDoc.Root.Elements("ports");
                    var MSportb = MSxmlDoc.Root.Elements("port");
                    var MSrunstatsa = MSxmlDoc.Root.Elements("runstats");
                    XmlDocument MSxdoc = new XmlDocument();

                    //Perhaps if OS is outdated recommend that the uprades to the latest OS

                    MSxdoc.Load(@"VSResults.xml");

                    XmlElement MSxelRoot = MSxdoc.DocumentElement;
                    XmlNodeList MSxnlNodes = MSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList MSportsNodes = MSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList MSportNodes = MSxelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode MSxndNode in MSxnlNodes)
                    {

                        var ScannedIP = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedVendor = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                        ScanVendor = ScannedVendor;
                        var ScannedHostname = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                        ScanHostname = ScannedHostname;
                        var ScannedExtraPorts = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']")).GetAttribute("count");
                        ExtraScanPorts = ScannedExtraPorts;

                        foreach (XmlNode MSportNodesa in MSportsNodes)
                        {
                            var ScannedPorts = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
  
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                        }
                        NestedPortList.Add(portList);

                        foreach (XElement MShost in MShosts)
                        {
                            var ScannedOS = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch")).GetAttribute("name");
                            ScanOS = ScannedOS;
                            var ScannedOSFamily = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass")).GetAttribute("osfamily");
                            //currently says embedded 
                            ScanOSFamily = ScannedOSFamily;

                        }
                        foreach (XElement MSrunstats in MSrunstatsa)
                        {
                            ScanCompletionTime = (string)MSrunstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }
                        
                        var cmdString = "INSERT INTO scannerdbmk3.Malcandata(ScanIP, ScanVendor, ScanOS, ScanOSFamily, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                            "VALUES(@ScanIP, @ScanVendor, @ScanOS, @ScanOSFamily, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {

                            try
                            {
                                command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts);
                                command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                conn.Open();
                                command.ExecuteNonQuery();

                                Console.WriteLine("Data transfer successful");
                                conn.Close();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Data transfer failed");
                                throw new Exception(
                                        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                      command, ex.Message));
                            }

                        }

                    }

                    break;
                    
                default:

                break;

            }

            //if (ScanData == null)
            //{
            //    return Page();
            //}
            return Page();
            //return RedirectToPage("./Scan");
        }

        //[HttpGet]
        //private decimal SearchNISTVendor(string VendorItem, string OSItem, decimal VulnScore)
        //{
        //    decimal VulnAverage = 0;
        //    string clientString = "https://services.nvd.nist.gov";
        //    //string VendorItemTrimmed = "";
        //    //https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=Microsoft  for vendor
        //    if (VendorItem.Contains("Arris"))
        //    {
        //        VendorItem = "arris";
        //        //VendorItem = VendorItem.Replace(" ", "_");
        //    }
        //    if (VendorItem.Contains("Sony"))
        //    {
        //        VendorItem = "sony";
        //        //VendorItem = VendorItem.Replace(" ", "_");
        //    }
        //    if (VendorItem.Contains("Nintendo"))
        //    {
        //        VendorItem = "nintendo";
        //        //clientString2 = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=nintendo"; 
        //        //VendorItem = VendorItem.Replace(" ", "_");
        //    }
        //    if (VendorItem == "Null")
        //    {
        //        return VulnAverage = 0;
        //    }

        //    string clientString2 = "/rest/json/cves/2.0?keywordSearch=" + VendorItem;
        //    if (VendorItem.Contains("Nintendo"))
        //    {
        //        clientString2 = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=nintendo";
        //        //VendorItem = VendorItem.Replace(" ", "_");
        //    }
        //    List<decimal> scoreList = new List<decimal>();

        //    string apiKey = "4c59b5c3-893e-4ce5-9d41-79b3e1ca0333";
        //    RestClient client = new RestClient(clientString);
        //    RestRequest request = new RestRequest(clientString2, Method.Get);
        //    request.AddHeader("key", apiKey);
        //    request.AddParameter("Authorization", "Bearer " + apiKey, ParameterType.HttpHeader);
        //    request.RequestFormat = DataFormat.Json;
        //    var response = client.Get(request);
        //    if (response.StatusCode == HttpStatusCode.OK)
        //    {
        //        Console.WriteLine("HttpStatusCode = OK");
        //        var parsed = JObject.Parse(response.Content);

        //        foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2[*].cvssData.baseScore"))
        //        {
        //            string t = tokn.ToString();
        //            decimal decVal = Convert.ToDecimal(t);
        //            scoreList.Add(decVal);
        //            Console.WriteLine(decVal);
        //        }

        //        foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.exploitabilityScore"))
        //        {
        //            string t = tokn.ToString();
        //            decimal decVal = Convert.ToDecimal(t);
        //            scoreList.Add(decVal);
        //        }

        //        foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.impactScore"))
        //        {
        //            string t = tokn.ToString();
        //            decimal decVal = Convert.ToDecimal(t);
        //            scoreList.Add(decVal);
        //        }
        //        scoreList.ForEach(Console.WriteLine);
        //    }

        //    else
        //    {
        //        Console.WriteLine("Error Message " + response.ErrorMessage);
        //        Console.WriteLine("Stack trace " + response.ErrorException);
        //        Console.WriteLine("An Error has occured!");
        //    }
        //}

        [HttpGet]
        private decimal SearchNIST(string VendorItem, string OSItem, decimal VulnScore)
        {
            decimal VulnAverage = 0;
            string clientString = "https://services.nvd.nist.gov";
            //string VendorItemTrimmed = "";
            //https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=Microsoft  for vendor
            if (VendorItem.Contains("Arris"))
            {
                VendorItem = "arris";
                //VendorItem = VendorItem.Replace(" ", "_");
            }
            if (VendorItem.Contains("Sony"))
            {
                VendorItem = "sony";
                //VendorItem = VendorItem.Replace(" ", "_");
            }
            if (VendorItem.Contains("Nintendo"))
            {
                VendorItem = "nintendo";
                //clientString2 = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=nintendo"; 
                //VendorItem = VendorItem.Replace(" ", "_");
            }
            if (VendorItem == "Null")
            {
                return VulnAverage = 0;
            }

            string clientString2 = "/rest/json/cves/2.0?keywordSearch=" + VendorItem;
            if (VendorItem.Contains("Nintendo"))
            {
                clientString2 = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=nintendo"; 
                //VendorItem = VendorItem.Replace(" ", "_");
            }
            if (VendorItem.Contains("Sony"))
            {
                VendorItem = "sony";
                clientString2 = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=sony";
                //VendorItem = VendorItem.Replace(" ", "_");
            }
            List<decimal> scoreList = new List<decimal>();

            string apiKey = "4c59b5c3-893e-4ce5-9d41-79b3e1ca0333";
            RestClient client = new RestClient(clientString);
            RestRequest request = new RestRequest(clientString2, Method.Get);
            request.AddHeader("key", apiKey);
            request.AddParameter("Authorization", "Bearer " + apiKey, ParameterType.HttpHeader);
            request.RequestFormat = DataFormat.Json;
            var response = client.Get(request);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                Console.WriteLine("HttpStatusCode = OK");
                var parsed = JObject.Parse(response.Content);

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2[*].cvssData.baseScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                    Console.WriteLine(decVal);
                }

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.exploitabilityScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                }

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.impactScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                }
                scoreList.ForEach(Console.WriteLine);            
            }

            else
            {
                Console.WriteLine("Error Message " + response.ErrorMessage);
                Console.WriteLine("Stack trace " + response.ErrorException);
                Console.WriteLine("An Error has occured!");
            }


            string Vendor;
            string OS = null;
            string Version = null;
            ///rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:1607
            string OSclientString = "";

            if (OSItem.Contains("Microsoft"))
            {
                Vendor = "microsoft";
                if(OSItem.Contains("Windows 11"))
                {
                    OS = "windows_11";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                else if(OSItem.Contains("Windows 10"))
                {
                    OS = "windows_10";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                else if (OSItem.Contains("Windows 8"))
                {
                    OS = "windows_8";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                else if (OSItem.Contains("Windows 7"))
                {
                    OS = "windows_7";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                else if (OSItem.Contains("Windows Vista"))
                {
                    OS = "windows_vista";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                else if (OSItem.Contains("Windows XP"))
                {
                    OS = "windows_xp";
                    string[] Splitter = OSItem.Split();
                    Version = Splitter.AsQueryable().Last();
                }
                OSclientString = "rest/json/cpes/2.0?cpeMatchString=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
            }

            else if (OSItem.Contains("Apple") || OSItem.Contains("apple"))
            {
                Vendor = "apple";
                if (OSItem.Contains("Mac OS X 10.7.0 (Lion) - 10.12 (Sierra) or iOS 4.1 - 9.3.3 (Darwin 10.0.0 - 16.4.0)"))
                {
                    OS = "mac_os_x";
                    Version = "sierra";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                    ///rest/json/cves/2.0?cpeName=cpe:2.3:o:apple:mac_os_x:10.4.10
                }
                else if (OSItem.Contains("Apple Mac OS X 10.4.10 (Tiger) (Darwin 8.10.0, PowerPC)"))
                {
                    OS = "mac_os_x";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 10.13 High Sierra"))
                {
                    OS = "mac_os_x";
                    Version = "high_sierra";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 10.14 Mojave"))
                {
                    OS = "mac_os_x";
                    Version = "mojave";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 10.15 Catalina"))
                {
                    OS = "mac_os_x";
                    Version = "catalina";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 11 Big Sur"))
                {
                    OS = "mac_os_x";
                    Version = "big_sur";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 12 Monterey"))
                {
                    OS = "mac_os_x";
                    Version = "monterey";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }
                else if (OSItem.Contains("MacOS 12 Ventura"))
                {
                    OS = "mac_os_x";
                    Version = "ventura";
                    OSclientString = "/rest/json/cves/2.0?cpeName=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
                }

                else if (OSItem.Contains("iPhone OS"))
                {
                    OS = "ios";
                    //string[] Splitter = OSItem.Split();
                    //Version = Splitter.AsQueryable().Last();
                    //Version.Replace(@")", string.Empty);
                    OSclientString = "/rest/json/cves/2.0?keywordSearch=iphone";
                }

                else if (OSItem.Contains("iPhone OS"))
                {
                    OS = "ios";
                    //string[] Splitter = OSItem.Split();
                    //Version = Splitter.AsQueryable().Last();
                    //Version.Replace(@")", string.Empty);
                    OSclientString = "/rest/json/cves/2.0?keywordSearch=ipod";
                }

                else
                {
                    OSclientString = "/rest/json/cves/2.0?keywordSearch=apple";
                }

            }
                //192.168.0.23
            if (OSItem == "Could not find OS")
            {
                VulnAverage = Queryable.Average(scoreList.AsQueryable());
                Console.WriteLine(VulnAverage);
                return VulnAverage;
            }
            else if(OSItem == "")
            {
                return VulnAverage;
            }
            else if (OSItem == "FreeBSD")
            {
                OSclientString = "/rest/json/cves/2.0?keywordSearch=freebsd";
            }
            else
            {
                string[] Splitter = OSItem.Split();
                OSItem = Splitter.AsQueryable().First();
                OSclientString = "/rest/json/cves/2.0?keywordSearch=" + OSItem;
                OSclientString = OSclientString.ToLower();
                //https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=Windows MacOs Debian 
            }

            //clientString = "https://services.nvd.nist.gov/rest/json/cpes/2.0?cpeMatchString=cpe:2.3:o:" + Vendor + ":" + OS + ":" + Version;
            ///rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:1607
            var OSclient = new RestClient(clientString);
            var OSrequest = new RestRequest(OSclientString, Method.Get);
            var OSresponse = client.Get(OSrequest);
            OSrequest.AddHeader("key", apiKey);
            OSrequest.AddParameter("Authorization", "Bearer " + apiKey, ParameterType.HttpHeader);
            string OSVulnerability = OSresponse.Content;
            //Console.WriteLine(response.Content.ToString());
            //Console.Read();
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var parsed = JObject.Parse(response.Content);

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2[*].cvssData.baseScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                    Console.WriteLine(decVal);
                }

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.exploitabilityScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                }

                foreach (var tokn in parsed.SelectTokens("vulnerabilities[*].cve.metrics.cvssMetricV2.impactScore"))
                {
                    string t = tokn.ToString();
                    decimal decVal = Convert.ToDecimal(t);
                    scoreList.Add(decVal);
                }
                scoreList.ForEach(Console.WriteLine);
            }

            else
            {
                Console.WriteLine("Error Message " + response.ErrorMessage);
                Console.WriteLine("Stack trace " + response.ErrorException);
                Console.WriteLine("An Error has occured!");
            }

            foreach (var i in scoreList)
            {
                if (i != 0)
                {
                    VulnAverage = Queryable.Average(scoreList.AsQueryable());
                    break;
                }
                else
                {
                    break;
                }
            }

            //Sequence contains no elements? - Need to fix 
            //if ((scoreList != null) || VulnAverage != null) //&& (!scoreList.Any())
            //{
            //    VulnAverage = Queryable.Average(scoreList.AsQueryable());
            //}
            //else if ((scoreList == null) || VulnAverage == null)
            //{
            //    return VulnAverage;
            //}
            return VulnAverage;
            //VulnAverage = Queryable.Average(scoreList.AsQueryable());
            //Console.WriteLine(VulnAverage);
            //return VulnAverage;
        }

        private void ParseDSData()
        {

            throw new NotImplementedException();
        }
    }

}
