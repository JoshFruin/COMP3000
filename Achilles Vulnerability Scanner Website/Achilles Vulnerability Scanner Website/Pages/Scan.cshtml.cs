using Achilles_Vulnerability_Scanner_Website.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;



namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class ScanModel : PageModel
    {

        [BindProperty]
        public RetScanModel ScanData { get; set; }

        public List<SelectListItem>? ListScan { get; set; }
        public void OnGet()
        {
            ListScan = new List<SelectListItem>
                 {
                   new SelectListItem { Value = "1", Text = "Quick Scan"},
                   new SelectListItem { Value = "2", Text = "Discovery Scan"},
                   new SelectListItem { Value = "3", Text = "OS Scan"},
                   new SelectListItem { Value = "4", Text = "Vulnerability Scan"},
                   new SelectListItem { Value = "5", Text = "Malware Scan"}
                 };
        }
        public class RetScanModel
        {
            public int ScanValue { get; set; }
           
            public string IPValue { get; set; }

        }

        public IActionResult OnPost()
        {
            //Variables to parse data to database
            string ScanIP = "";
            string ScanOS = ""; //Might just change this to vendor
            string ScanMac = "";
            string ScanHostname = "";
            string ScanPorts = "";
            string ScanCompletionTime = "";
            List<string> IPList = new List<string>();
            List<string> OSList = new List<string>();
            List<string> MacList = new List<string>();
            List<string> HostNameList = new List<string>();
            List<string> portList = new List<string>();
            List<List<string>> NestedPortList = new List<List<string>>();

            string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
            //Server=localhost\SQLEXPRESS03;Database=master;Trusted_Connection=True;
            
            MySqlConnection conn = new MySqlConnection(constring);
            //try
            //{
            //    conn.Open();
            //    Console.WriteLine("Connection Open");
            //    conn.Close();
            //}
            //catch (Exception ex)
            //{
            //    Console.WriteLine("Cannot open connection");
            //}


            switch (ScanData.ScanValue)
            {
                case 1:
                    //Converts concatinates the data to be one solid command for the command prompt
                    string QuickScan = "/C nmap -A -F -oX Desktop/QSresults.xml  ";
                    string QScmd = string.Concat(QuickScan, ScanData.IPValue);

                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    startInfo.FileName = "cmd.exe";
                    startInfo.Arguments = QScmd;
                    process.StartInfo = startInfo;
                    process.Start();
                    process.WaitForExit(); //Waits until the nmap scan is done      
               

                    break;

                case 2:
                    string DiscoScan = "/C nmap -F -oX DSResults.xml ";
                    string DScmd = string.Concat(DiscoScan, ScanData.IPValue);

                    System.Diagnostics.Process DSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo DSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    DSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    DSstartInfo.FileName = "cmd.exe";
                    DSstartInfo.Arguments = DScmd;
                    DSprocess.StartInfo = DSstartInfo;
                    DSprocess.Start();
                    DSprocess.WaitForExit();    //Waits until the nmap scan is done          

                    XDocument xmlDoc = XDocument.Load("DSResults.xml");
                    //string cmdString = "";
                    //MySqlCommand cmd;

                    //var hosthints = xmlDoc.Root.Elements("hosthint");
                    var hosts = xmlDoc.Root.Elements("host");
                    var porta = xmlDoc.Root.Elements("ports");
                    var portb = xmlDoc.Root.Elements("port");
                    var runstatsa = xmlDoc.Root.Elements("runstats");
                    XmlDocument xdoc = new XmlDocument();

                    xdoc.Load(@"DSResults.xml");

                    XmlElement xelRoot = xdoc.DocumentElement;
                    XmlNodeList xnlNodes = xelRoot.SelectNodes("/nmaprun");
                    XmlNodeList portsNodes = xelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList portNodes = xelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode xndNode in xnlNodes)
                    {

                        var ScannedIP = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedOS = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");          
                        if (xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") != null)
                        {
                            xdoc.DocumentElement.RemoveAttribute("vendor");
                        }
                        ScanOS = ScannedOS;
                        //var ScannedHostname = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                        //if (xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") != null)
                        //{
                        //    xdoc.DocumentElement.RemoveAttribute("name");
                        //}
                        //var ScannedPorts = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");

                        foreach (XmlNode portNodesa in portsNodes)
                        {
                            var ScannedPorts = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
                            //ScanPorts = ((XmlElement)portNodesa.Elements("port")
                            //                    .FirstOrDefault(x => x.Attribute("portid") != null)
                            //                    .Attribute("portid");
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                        }
                        //var ScannedCompletionTime = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/runstats/finished")).GetAttribute("timestr");
                        //IPList.Add(ScannedIP);
                        NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        foreach (XElement host in hosts)
                        {

                            //ScanIP = (string)host.Elements("address")
                            //            .FirstOrDefault(x => (string)x.Attribute("addrtype") == "ipv4")
                            //            .Attribute("addr");
                            //IPList.Add(ScanIP);
                            //ScanMac = (string)host.Elements("address")
                            //            .FirstOrDefault(x => (string)x.Attribute("addrtype") == "mac")
                            //            .Attribute("addr");
                            //MacList.Add(ScanMac);
                            //ScanOS = (string)host.Elements("address") //Will sometimes say "System.NullReferenceException: Object reference not set to an instance of an object"
                            //                .FirstOrDefault(x => x.Attribute("vendor") != null)
                            //                .Attribute("vendor");
                            //OSList.Add(ScanOS);
                            //ScanOS = (string)host.Descendants("address")
                            //        .FirstOrDefault().Attribute("vendor");
                            //OSList.Add(ScanOS);

                            ScanHostname = (string)host.Descendants("hostnames")
                                    .FirstOrDefault().Attribute("name");
                            HostNameList.Add(ScanHostname);

                            //    //ScanPorts = (string)host.Elements("port")
                            //    //                .FirstOrDefault(x => x.Attribute("portid") != null)
                            //    //                .Attribute("portid");
                            //    //foreach (XElement ports in porta)
                            //    //{
                            //    //    //ScanPorts = (string)ports.Descendants("port")
                            //    //    //    .First().Attribute("portid");
                            //    //    ScanPorts = (string)host.Elements("port")
                            //    //    .First(x => x.Attribute("portid") != null)
                            //    //    .Attribute("portid");   
                            //    //    portList.Add(ScanPorts);
                            //    //}

                            //    //foreach (XmlNode portNode in portNodes)
                            //    //{
                            //    //    foreach(XElement port in portb)
                            //    //    {
                            //    //        ScanPorts = (string)port.Descendants("port")
                            //    //        .First().Attribute("portid");
                            //    //        portList.Add(ScanPorts);
                            //    //    }
                            //    //}
                        }
                        foreach (XElement runstats in runstatsa)
                        {
                            ScanCompletionTime = (string)runstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }
                       
                        //cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                        //    "VALUES('" + IPList + "','" + MacList + "','" + HostNameList + "','" + portList + "','" + ScanCompletionTime + "')";
                      
                        var cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) VALUES(@ScanIP, @ScanOS, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                        //conn.Open();
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {
                           
                            try
                                {
                                    //command.Connection = conn;
                                    command.Parameters.Add("@ScanIP", MySqlDbType.VarChar, 50).Value = ScanIP;
                                    //command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    //try
                                    //{
                                    //    // execute the SQL command
                                    //    int rows = command.ExecuteNonQuery();
                                    //    if (rows > 0)
                                    //        Console.WriteLine("insert OK...");

                                    //}
                                    //catch (MySqlException e)
                                    //{
                                    //    // log the error
                                    //    throw new Exception(
                                    //        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                    //                      command, e.Message));
                                    //}

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }
                            
                        }
                       

                        //conn.Open();
                        //cmd = new MySqlCommand(cmdString, conn);
                        //try
                        //{
                        //    //command.Connection = conn;
                        //    cmd.Parameters.AddWithValue("?ScanIP", ScanIP);
                        //    cmd.Parameters.AddWithValue("?ScanOS", ScanOS);
                        //    cmd.Parameters.AddWithValue("?ScanMAC", ScanMac);
                        //    cmd.Parameters.AddWithValue("?ScanHostname", ScanHostname);
                        //    cmd.Parameters.AddWithValue("?ScanPorts", ScanPorts);
                        //    cmd.Parameters.AddWithValue("?ScanCompletionTime", ScanCompletionTime);
                        //    cmd.ExecuteNonQuery();
                        //    Console.WriteLine("Data transfer successful");
                        //    conn.Close();
                        //}
                        //catch (Exception ex)
                        //{
                        //            Console.WriteLine("Data transfer failed");
                        //}


                        //using (var command = new MySqlCommand(
                        //    "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) VALUES(@ScanIP, @ScanOS, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)", conn))
                        //    try
                        //    {
                        //        command.Parameters.AddWithValue("@ScanIP", ScanIP);
                        //        command.Parameters.AddWithValue("@ScanOS", ScanOS);
                        //        command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                        //        command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                        //        command.Parameters.AddWithValue("@ScanPorts", portList);
                        //        command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                        //        command.ExecuteNonQuery();
                        //        Console.WriteLine("Data transfer successful");
                        //        conn.Close();
                        //    }
                        //    catch
                        //    {
                        //        Console.WriteLine("Data transfer failed");
                        //    }
                        //conn.Close();
                    }

                    //conn.Open();
                    ////cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                    ////    "VALUES('" + IPList + "','" + MacList + "','" + HostNameList + "','" + portList + "','" + ScanCompletionTime + "')";
                    //cmdString = "insert into scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                    //    "values('" + ScanIP + "','" + ScanOS + "','" + "','" + ScanMac + "','" + ScanHostname + "','" + portList + "','" + ScanCompletionTime + "')";
                    //cmd = new MySqlCommand(cmdString, conn);
                    //if (cmd.ExecuteNonQuery() == 1) //Error was mySQLException "Column count doesn't match value count at row 1"
                    //{
                    //    Console.WriteLine("Data inserted");
                    //}
                    //else
                    //{
                    //    Console.WriteLine("Data transfer failed");
                    //}
                    //conn.Close();

                    break;


                case 3:
                    string OSScan = "/C nmap -A -sV -T4 -oX Desktop/OSresults.xml  ";
                    string OScmd = string.Concat(OSScan, ScanData.IPValue);

                    System.Diagnostics.Process OSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo OSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    OSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    OSstartInfo.FileName = "cmd.exe";
                    OSstartInfo.Arguments = OScmd;
                    OSprocess.StartInfo = OSstartInfo;
                    OSprocess.Start();
                    OSprocess.WaitForExit();

                    

                    break;

                case 4:
                    string VulnScan = "/C nmap nmap --script vuln -T4 -oX Desktop/VSresults.xml ";
                    string Vulncmd = string.Concat(VulnScan, ScanData.IPValue);

                    System.Diagnostics.Process Vulnprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo VulnstartInfo = new System.Diagnostics.ProcessStartInfo();
                    VulnstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    VulnstartInfo.FileName = "cmd.exe";
                    VulnstartInfo.Arguments = Vulncmd;
                    Vulnprocess.StartInfo = VulnstartInfo;
                    Vulnprocess.Start();
                    Vulnprocess.WaitForExit();

                    
                    

                    break;

                case 5:
                    string MalScan = "/C nmap --script malware -T4 -oX Desktop/MSresults.xml ";
                    string Malcmd = string.Concat(MalScan, ScanData.IPValue);

                    System.Diagnostics.Process Malprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo MalstartInfo = new System.Diagnostics.ProcessStartInfo();
                    MalstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    MalstartInfo.FileName = "cmd.exe";
                    MalstartInfo.Arguments = Malcmd;
                    Malprocess.StartInfo = MalstartInfo;
                    Malprocess.Start();
                    Malprocess.WaitForExit();

                    

                    break;
                    
                default:

                break;

            }

            //if (ScanData == null)
            //{
            //    return Page();
            //}

            return RedirectToPage("./Scan");
        }

        private void ParseDSData()
        {

            throw new NotImplementedException();
        }
    }

}
