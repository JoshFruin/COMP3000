using Achilles_Vulnerability_Scanner_Website.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;



namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class ScanModel : PageModel
    {

        [BindProperty]
        public RetScanModel ScanData { get; set; }

        public List<SelectListItem>? ListScan { get; set; }
        public void OnGet()
        {
            ListScan = new List<SelectListItem>
                 {
                   new SelectListItem { Value = "1", Text = "Quick Scan"},
                   new SelectListItem { Value = "2", Text = "Discovery Scan"},
                   new SelectListItem { Value = "3", Text = "OS Scan"},
                   new SelectListItem { Value = "4", Text = "Vulnerability Scan"},
                   new SelectListItem { Value = "5", Text = "Malware Scan"}
                 };
        }
        public class RetScanModel
        {
            public int ScanValue { get; set; }
           
            public string IPValue { get; set; }

        }

        public IActionResult OnPost()
        {

            switch (ScanData.ScanValue)
            {
                case 1:
                    //Converts concatinates the data to be one solid command for the command prompt
                    string QuickScan = "/C nmap -A -F -oX Desktop/QSresults.xml  ";
                    string QScmd = string.Concat(QuickScan, ScanData.IPValue);

                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    startInfo.FileName = "cmd.exe";
                    startInfo.Arguments = QScmd;
                    process.StartInfo = startInfo;
                    process.Start();

                    break;

                case 2:
                    string DiscoScan = "/C nmap -F -oX DSResults.xml ";
                    string DScmd = string.Concat(DiscoScan, ScanData.IPValue);

                    System.Diagnostics.Process DSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo DSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    DSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    DSstartInfo.FileName = "cmd.exe";
                    DSstartInfo.Arguments = DScmd;
                    DSprocess.StartInfo = DSstartInfo;
                    DSprocess.Start();
                    DSprocess.WaitForExit();    //Waits until the nmap scan is done

                    //Scan to be parsed to the database
                    //int DiscoID;
                    string ScanIP = "";
                    string ScanOS = "";
                    string ScanMac = "";
                    string ScanHostname = "";
                    string[] ScanPortArray = new string[0];
                    List<string> portList = new List<string>();
                    string ScanPorts = "";
                    string ScanCompletionTime = "";

                    //Connection string to link 
                    //string server = "localhost";
                    //string database = "scannerdbmk3";
                    //string uid = "root";
                    //string password = "C4bbages!";
                    //string constring = "SERVER=" + server + ";" + "DATABASE=" + database + ";" +
                    //    "UID=" + username + ";" + "PASSWORD" + password + ";";
                    string constring = "server = localhost; database = scannerdbmk3; uid = root; pwd = C4bbages!;";

                    MySqlConnection conn = new MySqlConnection(constring);

                    //string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);   
                    XDocument xmlDoc = XDocument.Load("DSResults.xml");
                    //var nmapruns = xmlDocument.Root.Elements("nmaprun");
                    string cmdString = "";
                    cmdString = "insert into scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                        "values('" + ScanIP + "','" + ScanMac + "','" + ScanHostname + "','" + ScanPorts + "','" + ScanCompletionTime + "')";
                    MySqlCommand cmd = null;
                    conn.Open();
                   

                    var hosthints = xmlDoc.Root.Elements("hosthint");
                    var addrs = xmlDoc.Root.Elements("addr");
                    var porta = xmlDoc.Root.Elements("ports");
                    var runstatsa = xmlDoc.Root.Elements("runstats");
                    //XmlDocument xDoc = new XmlDocument();
                    //xDoc.Load("DSResults");
                    XmlDocument xdoc = new XmlDocument();

                    xdoc.Load(@"DSResults.xml");

                    XmlElement xelRoot = xdoc.DocumentElement;
                    XmlNodeList xnlNodes = xelRoot.SelectNodes("/nmaprun");


                    foreach (XmlNode xndNode in xnlNodes)
                    {
                        foreach (XElement hosthint in hosthints)
                        {                         

                            ScanIP = (string)hosthint.Elements("address")
                                        .FirstOrDefault(x => (string)x.Attribute("addrtype") == "ipv4")
                                        .Attribute("addr");
                            ScanMac = (string)hosthint.Elements("address")
                                        .FirstOrDefault(x => (string)x.Attribute("addrtype") == "mac")
                                        .Attribute("addr");

                            //ScanOS = (string)hosthint.Elements("address")
                            //                .FirstOrDefault(x => x.Attribute("vendor") != null)
                            //                .Attribute("vendor");

                            ScanOS = (string)hosthint.Descendants("address")
                                    .FirstOrDefault().Attribute("vendor");

                            ScanHostname = (string)hosthint.Descendants("hostnames")
                                    .FirstOrDefault().Attribute("name");
                        
                        }
                        foreach (XElement ports in porta)
                        {
                            ScanPorts = (string)ports.Elements("port")
                            .FirstOrDefault().Attribute("portID");
                            portList.Add(ScanPorts);
                        }
                        //ScanPorts = (string)hosthint.Elements("port")
                        //        .FirstOrDefault(x => x.Attribute("port") != null)
                        //        .Attribute("portid");
                        foreach(XElement runstats in runstatsa)
                        {
                            ScanCompletionTime = (string)runstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                            //ScanCompletionTime = (string)runstats.Elements("runstats")
                            //            .FirstOrDefault(x => x.Attribute("finished") != null)
                            //            .Attribute("timestr");
                        }
                       
                        cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                        "VALUES('" + ScanIP + "','" + ScanMac + "','" + ScanHostname + "','" + portList + "','" + ScanCompletionTime + "')";
                        cmd = new MySqlCommand(cmdString, conn);
                    }

                    //XmlNodeList nmapruns = xDoc.GetElementsByTagName("nmaprun");
                    //foreach (XmlNode host in  nmapruns)
                    //{
                    //    ScanHostname = ((XmlElement)host.SelectSingleNode("hostnames/hostname")).GetAttribute("name");
                    //    ScanIP = ((XmlElement)host.SelectSingleNode("address[@addrtype='ipv4']")).GetAttribute("addr");
                    //    ScanOS = ((XmlElement)host.SelectSingleNode("address[@addrtype='ipv6']")).GetAttribute("vendor");

                    //}

                    //foreach (XElement nmaprun in nmapruns)
                    //{
                    //    foreach(XElement addr in addrs)
                    //    {
                    //        ScanHostname = (string)nmaprun.Descendants("hostname")
                    //                    .FirstOrDefault().Attribute("name");

                    //        ScanIP = (string)nmaprun.Elements("address")
                    //                    .FirstOrDefault(x => (string)x.Attribute("addrtype") == "ipv4")
                    //                    .Attribute("addr");
                    //        ScanMac = (string)nmaprun.Elements("address")
                    //                    .FirstOrDefault(x => (string)x.Attribute("addrtype") == "mac")
                    //                    .Attribute("addr");

                    //        ScanOS = (string)nmaprun.Elements("address")
                    //                        .FirstOrDefault(x => x.Attribute("vendor") != null)
                    //                        .Attribute("vendor");
                    //    }    
                    //    foreach(XElement port in ports)
                    //    {
                    //        ScanPorts = (string)nmaprun.Elements("ports")
                    //                    .FirstOrDefault(x => x.Attribute("port") != null)
                    //                    .Attribute("portid");
                    //    }
                    //    foreach (XElement runstats in runstatso)
                    //    {
                    //        ScanCompletionTime = (string)nmaprun.Elements("runstats")
                    //                    .FirstOrDefault(x => x.Attribute("finished") != null)
                    //                    .Attribute("summary");
                    //    }

                    //    cmdString = "insert into scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                    //    "values('" + ScanIP + "','" + ScanMac + "','" + ScanHostname + "','" + ScanPorts + "','" + ScanCompletionTime + "')";
                    //    cmd = new MySqlCommand(cmdString, conn);
                    //}

                    //foreach (XElement hosthint in hosthints)
                    //{
                    //    ScanHostname = (string)nmaprun.Descendants("hostname")
                    //                .FirstOrDefault().Attribute("name");

                    //    ScanIP = (string)nmaprun.Elements("address")
                    //                .FirstOrDefault(x => (string)x.Attribute("addrtype") == "ipv4")
                    //                .Attribute("addr");
                    //    ScanMac = (string)nmaprun.Elements("address")
                    //                .FirstOrDefault(x => (string)x.Attribute("addrtype") == "mac")
                    //                .Attribute("addr");

                    //    ScanOS = (string)nmaprun.Elements("address")
                    //                    .FirstOrDefault(x => x.Attribute("vendor") != null)
                    //                    .Attribute("vendor");

                    //    ScanPorts = (string)nmaprun.Elements("ports")
                    //                .FirstOrDefault(x => x.Attribute("port") != null)
                    //                .Attribute("portid");

                    //    ScanCompletionTime = (string)nmaprun.Elements("runstats")
                    //                .FirstOrDefault(x => x.Attribute("finished") != null)
                    //                .Attribute("summary");
                    //    cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanOS, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                    //    "VALUES('" + ScanIP + "','" + ScanMac + "','" + ScanHostname + "','" + ScanPorts + "','" + ScanCompletionTime + "')";
                    //    cmd = new MySqlCommand(cmdString, conn);
                    //}

                    conn.Close();

                    //foreach (XmlNode nmaprun in nmapruns)
                    //{
                    //    var hostname = ((XmlElement)host.SelectSingleNode("hostnames/hostname")).GetAttribute("name");
                    //    var ipv4Address = ((XmlElement)host.SelectSingleNode("address[@addrtype='ipv4']")).GetAttribute("addr");
                    //    var vendor = ((XmlElement)host.SelectSingleNode("address[@addrtype='ipv6']")).GetAttribute("vendor");
                    //    // Add to list
                    //}

                    //XmlReader xmlReader = XmlReader.Create(@"C:\Users\jafru\Desktop\DSresults.xml");
                    //XElement xelement = XElement.Load(xmlReader);
                    //IEnumerable<XElement> nmaprun = xelement.Elements()

                    //while (xmlReader.Read())
                    //{
                    //    //Get IP Address
                    //    if (xmlReader.NodeType == XmlNodeType.Element && xmlReader.Name == "addrtype =\"ipv4\"")
                    //    {
                    //        ScanIP = nmaprun
                    //    }

                    //    dynamic line = null;
                    //    if (CommonFunctions.strpos((XVar)(line), new XVar("addrtype=\"ipv4\"")) == true)
                    //    {
                    //        dynamic ip = null, results = null;
                    //        CommonFunctions.preg_match(new XVar("/addr=\".* addrtype/"), (XVar)(line), (XVar)(results));
                    //        ip = XVar.Clone(CommonFunctions.implode(new XVar(" "), (XVar)(results)));
                    //        ip = XVar.Clone(CommonFunctions.ltrim((XVar)(ip), new XVar("addr=\"")));
                    //        ip = XVar.Clone(CommonFunctions.rtrim((XVar)(ip), new XVar("\" addrtype")));
                    //        MVCFunctions.Concat("", "IP Address:  ", ip, "<br>");
                    //    }
                    //    return null;
                    //}                   

                    //int i;
                    //conn.Open();
                    //for (i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
                    //{
                    //    DiscoID = Convert.ToInt32(ds.Tables[0].Rows[i].ItemArray[0]);
                    //    ScanIP = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                    //    ScanOS = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                    //    ScanMac = ds.Tables[0].Rows[i].ItemArray[3].ToString();
                    //    ScanHostname = ds.Tables[0].Rows[i].ItemArray[4].ToString();
                    //    ScanPorts = ds.Tables[0].Rows[i].ItemArray[5].ToString();
                    //    ScanCompletionTime = ds.Tables[0].Rows[i].ItemArray[6].ToString();

                    //    sql = "insert into discoscandata values(" + DiscoID + ",'" + ScanIP.Replace("'", "''") + "','" + ScanOS.Replace("'", "''") + "','" + ScanMac.Replace("'", "''") + "','" + ScanHostname.Replace("'", "''") + "','" + ScanPorts.Replace("'", "''") + "','" + ScanCompletionTime.Replace("'", "''") + "' )";
                    //    command = new MySqlCommand(sql, conn);
                    //    adapter.InsertCommand = command;
                    //    adapter.InsertCommand.ExecuteNonQuery();
                    //}
                    //conn.Close();

                    break;


                case 3:
                    string OSScan = "/C nmap -A -sV -T4 -oX Desktop/OSresults.xml  ";
                    string OScmd = string.Concat(OSScan, ScanData.IPValue);

                    System.Diagnostics.Process OSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo OSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    OSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    OSstartInfo.FileName = "cmd.exe";
                    OSstartInfo.Arguments = OScmd;
                    OSprocess.StartInfo = OSstartInfo;
                    OSprocess.Start();

                    break;

                case 4:
                    string VulnScan = "/C nmap nmap --script vuln -T4 -oX Desktop/VSresults.xml ";
                    string Vulncmd = string.Concat(VulnScan, ScanData.IPValue);

                    System.Diagnostics.Process Vulnprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo VulnstartInfo = new System.Diagnostics.ProcessStartInfo();
                    VulnstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    VulnstartInfo.FileName = "cmd.exe";
                    VulnstartInfo.Arguments = Vulncmd;
                    Vulnprocess.StartInfo = VulnstartInfo;
                    Vulnprocess.Start();

                    break;

                case 5:
                    string MalScan = "/C nmap --script malware -T4 -oX Desktop/MSresults.xml ";
                    string Malcmd = string.Concat(MalScan, ScanData.IPValue);

                    System.Diagnostics.Process Malprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo MalstartInfo = new System.Diagnostics.ProcessStartInfo();
                    MalstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    MalstartInfo.FileName = "cmd.exe";
                    MalstartInfo.Arguments = Malcmd;
                    Malprocess.StartInfo = MalstartInfo;
                    Malprocess.Start();

                    break;
                    
                default:

                break;

            }

            //if (ScanData == null)
            //{
            //    return Page();
            //}

            return RedirectToPage("./Scan");
        }

        private void ParseDSData()
        {

            throw new NotImplementedException();
        }
    }

}
