using Achilles_Vulnerability_Scanner_Website.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;



namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class ScanModel : PageModel
    {

        [BindProperty]
        public RetScanModel ScanData { get; set; }

        public List<SelectListItem>? ListScan { get; set; }
        public void OnGet()
        {
            ListScan = new List<SelectListItem>
                 {
                   new SelectListItem { Value = "1", Text = "Quick Scan"},
                   new SelectListItem { Value = "2", Text = "Discovery Scan"},
                   new SelectListItem { Value = "3", Text = "OS Scan"},
                   new SelectListItem { Value = "4", Text = "Vulnerability Scan"},
                   new SelectListItem { Value = "5", Text = "Malware Scan"}
                 };
        }
        public class RetScanModel
        {
            public int ScanValue { get; set; }
           
            public string IPValue { get; set; }

        }

        public IActionResult OnPost()
        {
            //Variables to parse data to database
            string ScanIP = "";
            string ScanOS = ""; 
            string ScanMac = "";
            string ScanHostname = "";
            string ScanPorts = "";
            string[] ScanPortsArray = new string[0]; ;
            string ExtraScanPorts = "";
            string ScanPortServices = "";
            string ScanCompletionTime = "";
            string ScanVendor = "";
            string ScanOSFamily = "";
            string ScanTCPSeq = "";
            string ScanVuln = "";
            string ScanKey = "";
            string ScanKeyState = "";
            List<string> IPList = new List<string>();
            List<string> OSList = new List<string>();
            List<string> MacList = new List<string>();
            List<string> HostNameList = new List<string>();
            List<string> portList = new List<string>();
            List<List<string>> NestedPortList = new List<List<string>>();

            string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
            //Server=localhost\SQLEXPRESS03;Database=master;Trusted_Connection=True;
            
            MySqlConnection conn = new MySqlConnection(constring);

            switch (ScanData.ScanValue)
            {
                case 1:
                    //Concatenates the data to be one solid command for the command prompt
                    string QuickScan = "/C nmap -A -F -oX QSresults.xml  ";
                    string QScmd = string.Concat(QuickScan, ScanData.IPValue);

                    Process process = new Process();
                    ProcessStartInfo startInfo = new ProcessStartInfo();
                    startInfo.WindowStyle = ProcessWindowStyle.Hidden; //Change to normal for debugging
                    startInfo.FileName = "cmd.exe";
                    startInfo.Arguments = QScmd;
                    process.StartInfo = startInfo;
                    process.Start();
                    process.WaitForExit(); //Waits until the nmap scan is done      

                    XDocument QSxmlDoc = XDocument.Load("QSresults.xml");

                    var QShosts = QSxmlDoc.Root.Elements("host");
                    var QSporta = QSxmlDoc.Root.Elements("ports");
                    var QSportb = QSxmlDoc.Root.Elements("port");
                    var QSOSs = QSxmlDoc.Root.Elements("os");
                    var QSrunstatsa = QSxmlDoc.Root.Elements("runstats");
                    XmlDocument QSxdoc = new XmlDocument();

                    QSxdoc.Load(@"QSResults.xml");

                    //Defines the nodes/elements to loop through
                    XmlElement QSxelRoot = QSxdoc.DocumentElement;
                    XmlNodeList QSxnlNodes = QSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList QSportsNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList QSportNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports/port");
                    XmlNodeList QSExtraPortsNodes = QSxelRoot.SelectNodes("/nmaprun/host/ports/extraports");
                    //XmlNodeList QSOSs = QSxelRoot.SelectNodes("/nmaprun/host/os");

                    foreach (XmlNode QSxndNode in QSxnlNodes)
                    {
                        //Collects the data from the nodes/elements
                        var ScannedIP = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedVendor = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                        ScanVendor = ScannedVendor;
                        var ScannedExtraPorts = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']")== null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']")).GetAttribute("count");
                        ExtraScanPorts = ScannedExtraPorts;
                        var ScannedOS = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch")).GetAttribute("name");
                        ScanOS = ScannedOS;
                        var ScannedOSFamily = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osclass") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osclass")).GetAttribute("osfamily");
                        ScanOSFamily = ScannedOSFamily;
                        var OSPortUsed = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osclass") == null) ? "Null" :((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/os/osclass")).GetAttribute("portid");
                        var TCPSeq = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/tcpsequence")).GetAttribute("difficulty");
                        //if (QSxndNode.SelectSingleNode("/nmaprun/host/tcpsequence") != null)
                        //{
                        //    QSxdoc.DocumentElement.RemoveAttribute("difficulty");
                        //}
                        //ScanTCPSeq = TCPSeq;

                        //The parenthesized comment is based on the difficulty index and ranges from Trivial joke to Easy, Medium, Formidable, Worthy challenge, and finally Good luck!


                        var ScannedHostname = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") == null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                        ScanHostname = ScannedHostname;


                        foreach (XmlNode QSportNodesa in QSportsNodes)
                        {
                            var ScannedPorts = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/port") == null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
                            //ScanPorts = ((XmlElement)portNodesa.Elements("port")
                            //                    .FirstOrDefault(x => x.Attribute("portid") != null)
                            //                    .Attribute("portid");
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                            var ScannedPortServices = ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/port/service") == null) ? "Null" : ((XmlElement)QSxndNode.SelectSingleNode("/nmaprun/host/ports/port/service")).GetAttribute("name");
                            ScanPortServices = ScannedPortServices;
                        }
                        //IPList.Add(ScannedIP);
                        NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        //try null conditional operator for null objects ?

                        foreach (XElement QSrunstats in QSrunstatsa)
                        {
                            ScanCompletionTime = (string)QSrunstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }

                        var cmdString = "INSERT INTO scannerdbmk3.quickscandata(ScanIP, ScanVendor, ScanOS, ScanOSFamily, ScanMAC, ScanHostname, ScanPorts, ClosedPorts, ScanCompletionTime) " +
                            "VALUES(@ScanIP, @ScanVendor, @ScanOS, @ScanOSFamily, @ScanMAC, @ScanHostname, @ScanPorts, @ClosedPorts, @ScanCompletionTime)";
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {

                            try
                            {
                                command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                command.Parameters.AddWithValue("@ScanOSFamily", ScanOSFamily);
                                command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts); 
                                //command.Parameters.AddWithValue("@ScanTCPSeq", ScanTCPSeq);
                                command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                conn.Open();
                                command.ExecuteNonQuery();

                                Console.WriteLine("Data transfer successful");
                                conn.Close();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Data transfer failed");
                                throw new Exception(
                                        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                      command, ex.Message));
                            }

                        }

                    }

                    break;

                case 2:
                    string DiscoScan = "/C nmap -F -oX DSResults.xml ";
                    string DScmd = string.Concat(DiscoScan, ScanData.IPValue);

                    System.Diagnostics.Process DSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo DSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    DSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    DSstartInfo.FileName = "cmd.exe";
                    DSstartInfo.Arguments = DScmd;
                    DSprocess.StartInfo = DSstartInfo;
                    DSprocess.Start();
                    DSprocess.WaitForExit();    //Waits until the nmap scan is done          

                    XDocument xmlDoc = XDocument.Load("DSResults.xml");

                    var hosts = xmlDoc.Root.Elements("host");
                    var porta = xmlDoc.Root.Elements("ports");
                    var portb = xmlDoc.Root.Elements("port");
                    var runstatsa = xmlDoc.Root.Elements("runstats");
                    XmlDocument xdoc = new XmlDocument();

                    xdoc.Load(@"DSResults.xml");

                    XmlElement xelRoot = xdoc.DocumentElement;
                    XmlNodeList xnlNodes = xelRoot.SelectNodes("/nmaprun");
                    XmlNodeList portsNodes = xelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList portNodes = xelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode xndNode in xnlNodes)
                    {
                        foreach (XElement hostElement in xmlDoc.Descendants("host"))
                        {
                            //var ScannedIP = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                            //ScanIP = ScannedIP;
                            //var ScannedMac = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                            //ScanMac = ScannedMac;
                            //var ScannedVendor = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                            //ScanVendor = ScannedVendor;
                            //var ScannedHostname = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                            //ScanHostname = ScannedHostname;
                            //Gets the XElement "address" that have the attribute "addrtype" set to "ipv4"
                            XElement ScannedIP = (from addressElement in hostElement.Elements("address")
                                                  where addressElement.Attribute("addrtype").Value == "ipv4"
                                                  select addressElement).Single();
                            // Gets the XElement "address" that have the attribute "addrtype" set to "mac"
                            XElement ScannedMac = (from addressElement in hostElement.Elements("address")
                                                   where addressElement.Attribute("addrtype").Value == "mac"
                                                   select addressElement).FirstOrDefault();
                            var addrIpv4 = ScannedIP.Attribute("addr").Value;
                            var addrMac = ScannedMac.Attribute("addr") != null ? ScannedMac.Attribute("addr").Value : ("Null");
                            var addrVendor = (ScannedMac.Attribute("vendor") == null) ? "Null" : ScannedMac.Attribute("vendor").Value;
                            var ScannedPorts = (from portElement in hostElement.Element("ports").Elements("port")
                                     select portElement.Attribute("portid").Value).ToList();
                            //ScanPorts = ScannedPorts.ToString();
                            //ScanPortsArray = ScannedPorts.ToArray();
                            ScanPorts = string.Join(",", ScannedPorts); 
                            //ScanPorts = ScanPortsArray.ToString();
                            var ScanCompTime = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/runstats/finished") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("//nmaprun/runstats/finished")).GetAttribute("timestr");
                            ScanCompletionTime = ScanCompTime;
                            var cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanVendor, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) VALUES(@ScanIP, @ScanVendor, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                            using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                            {

                                try
                                {
                                    command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                    command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                    command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                    command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                    command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                    command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                    conn.Open();
                                    command.ExecuteNonQuery();

                                    Console.WriteLine("Data transfer successful");
                                    conn.Close();
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Data transfer failed");
                                    throw new Exception(
                                            String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                          command, ex.Message));
                                }

                            }
                        }

                        //var ScannedIP = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        //ScanIP = ScannedIP;
                        //var ScannedMac = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        //ScanMac = ScannedMac;
                        //var ScannedVendor = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");          
                        //ScanVendor = ScannedVendor;
                        //var ScannedHostname = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/hostnames/hostname")).GetAttribute("name");
                        //ScanHostname = ScannedHostname;

                        //var ScannedPorts = ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/ports/port") == null) ? "Null" : ((XmlElement)xndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
                        //ScanPorts = ScannedPorts;                          

                        //IPList.Add(ScannedIP);
                        //NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        //foreach (XElement runstats in runstatsa)
                        //{
                        //    ScanCompletionTime = (string)runstats.Descendants("finished")
                        //            .FirstOrDefault().Attribute("timestr");
                        //}                    
                      
                        //var cmdString = "INSERT INTO scannerdbmk3.discoscandata(ScanIP, ScanVendor, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) VALUES(@ScanIP, @ScanVendor, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";                       
                        //using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        //{
                           
                        //    try
                        //        {
                        //            command.Parameters.AddWithValue("@ScanIP", ScanIP);
                        //            command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                        //            command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                        //            command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                        //            command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                        //            command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                        //            conn.Open();
                        //            command.ExecuteNonQuery();

                        //            Console.WriteLine("Data transfer successful");
                        //            conn.Close();
                        //        }
                        //        catch (Exception ex)
                        //        {
                        //            Console.WriteLine("Data transfer failed");
                        //            throw new Exception(
                        //                    String.Format("Error executing the command '{0}'. The error is '{1}'.",
                        //                                  command, ex.Message));
                        //        }
                            
                        //}
                       
                    }

                    break;


                case 3:
                    string OSScan = "/C nmap -A -sV -T4 -oX OSResults.xml  ";
                    string OScmd = string.Concat(OSScan, ScanData.IPValue);

                    System.Diagnostics.Process OSprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo OSstartInfo = new System.Diagnostics.ProcessStartInfo();
                    OSstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    OSstartInfo.FileName = "cmd.exe";
                    OSstartInfo.Arguments = OScmd;
                    OSprocess.StartInfo = OSstartInfo;
                    OSprocess.Start();
                    OSprocess.WaitForExit();

                    XDocument OSxmlDoc = XDocument.Load("OSResults.xml");

                    var OShosts = OSxmlDoc.Root.Elements("host");
                    var OSporta = OSxmlDoc.Root.Elements("ports");
                    var OSportb = OSxmlDoc.Root.Elements("port");
                    var OSrunstatsa = OSxmlDoc.Root.Elements("runstats");
                    XmlDocument OSxdoc = new XmlDocument();

                    //Perhaps if OS is outdated recommend that the uprades to the latest OS?

                    OSxdoc.Load(@"OSResults.xml");

                    XmlElement OSxelRoot = OSxdoc.DocumentElement;
                    XmlNodeList OSxnlNodes = OSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList OSportsNodes = OSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList OSportNodes = OSxelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode OSxndNode in OSxnlNodes)
                    {

                        var ScannedIP = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedVendor = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                        ScanVendor = ScannedVendor;
                        var ScannedHostname = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                        ScanHostname = ScannedHostname;

                        foreach (XmlNode OSportNodesa in OSportsNodes)
                        {
                            var ScannedPorts = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                        }
                        //IPList.Add(ScannedIP);
                        NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        foreach (XElement OShost in OShosts)
                        {
                            var ScannedOS = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch") == null) ? "Null" : ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch")).GetAttribute("name");
                            ScanOS = ScannedOS;
                            var ScannedOSFamily = ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/os/osclass") == null) ? "Null" :  ((XmlElement)OSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass")).GetAttribute("osfamily");
                            //Above currently says embedded 
                            ScanOSFamily = ScannedOSFamily;

                        }
                        foreach (XElement OSrunstats in OSrunstatsa)
                        {
                            ScanCompletionTime = (string)OSrunstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }

                        var cmdString = "INSERT INTO scannerdbmk3.OScandata(ScanIP, ScanVendor, ScanOS, ScanOSFamily, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                            "VALUES(@ScanIP, @ScanVendor, @ScanOS, @ScanOSFamily, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {

                            try
                            {
                                command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                command.Parameters.AddWithValue("@ScanOSFamily", ScanOSFamily);
                                command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                //command.Parameters.AddWithValue("@ScanTCPSeq", ScanTCPSeq);
                                command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                conn.Open();
                                command.ExecuteNonQuery();

                                Console.WriteLine("Data transfer successful");
                                conn.Close();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Data transfer failed");
                                throw new Exception(
                                        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                      command, ex.Message));
                            }

                        }

                    }

                    break;

                case 4:
                    string VulnScan = "/C nmap nmap --script vuln -T4 -oX VSResults.xml ";
                    string Vulncmd = string.Concat(VulnScan, ScanData.IPValue);

                    System.Diagnostics.Process Vulnprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo VulnstartInfo = new System.Diagnostics.ProcessStartInfo();
                    VulnstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    VulnstartInfo.FileName = "cmd.exe";
                    VulnstartInfo.Arguments = Vulncmd;
                    Vulnprocess.StartInfo = VulnstartInfo;
                    Vulnprocess.Start();
                    Vulnprocess.WaitForExit();

                    XDocument VSxmlDoc = XDocument.Load("VSResults.xml");

                    var VShosts = VSxmlDoc.Root.Elements("host");
                    var VSporta = VSxmlDoc.Root.Elements("ports");
                    var VSportb = VSxmlDoc.Root.Elements("port");
                    var VSrunstatsa = VSxmlDoc.Root.Elements("runstats");
                    XmlDocument VSxdoc = new XmlDocument();

                    VSxdoc.Load(@"VSResults.xml");

                    XmlElement VSxelRoot = VSxdoc.DocumentElement;
                    XmlNodeList VSxnlNodes = VSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList VSportsNodes = VSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList VSportNodes = VSxelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode VSxndNode in VSxnlNodes)
                    {

                        var ScannedIP = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedVendor = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                        ScanVendor = ScannedVendor;
                        var ScannedVuln = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/script") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/script")).GetAttribute("output");
                        ScanVuln = ScannedVuln;
                        var ScannedExtraPorts = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']")).GetAttribute("count");
                        ExtraScanPorts = ScannedExtraPorts;
                        var ScannedHostname = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                        ScanHostname = ScannedHostname;

                        //<elem key="title">Diffie-Hellman Key Exchange Insufficient Group Strength</elem> Could make this a key exchange column?
                        //<elem key="state">VULNERABLE</elem>
                        var ScannedKey = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/elem[@key='title']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/elem[@key='title']")).GetAttribute("title");
                        ScanKey = ScannedKey;
                        var ScannedKeyState = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/elem[@key='state']") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/elem[@key='state")).GetAttribute("state");
                        ScanKeyState = ScannedKeyState;

                        foreach (XmlNode VSportNodesa in VSportsNodes)
                        {
                            var ScannedPorts = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                        }

                        NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        foreach (XElement VShost in VShosts)
                        {
                            var ScannedOS = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch")).GetAttribute("name");
                            ScanOS = ScannedOS;
                            var ScannedOSFamily = ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass") == null) ? "Null" : ((XmlElement)VSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass")).GetAttribute("osfamily"); //currently says embedded 
                            //if (OSxndNode.SelectSingleNode("/nmaprun/host/os/osclass") != null)
                            //{
                            //    OSxdoc.DocumentElement.RemoveAttribute("osfamily");
                            //}
                            ScanOSFamily = ScannedOSFamily;

                        }
                        foreach (XElement VSrunstats in VSrunstatsa)
                        {
                            ScanCompletionTime = (string)VSrunstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }

                        var cmdString = "INSERT INTO scannerdbmk3.vulnscandata(ScanIP, ScannedVulnerabilities, ScannedKey, ScannedKeyState, ScanVendor, ScanOS, ScanOSFamily, ScanMAC, ScanHostname, ScanPorts, ClosedPorts, ScanCompletionTime) " +
                            "VALUES(@ScanIP, @ScannedVulnerabilities, @ScannedKey, @ScannedKeyState, @ScanVendor, @ScanOS, @ScanOSFamily, @ScanMAC, @ScanHostname, @ScanPorts, @ClosedPorts, @ScanCompletionTime)";
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {

                            try
                            {
                                command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                command.Parameters.AddWithValue("@ScannedVulnerabilities", ScanVuln);
                                command.Parameters.AddWithValue("@ScannedKey", ScanKey);
                                command.Parameters.AddWithValue("@ScannedKeyState", ScanKeyState);
                                command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                command.Parameters.AddWithValue("@ScanOSFamily", ScanOSFamily);
                                command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts);
                                command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                conn.Open();
                                command.ExecuteNonQuery();

                                Console.WriteLine("Data transfer successful");
                                conn.Close();
                            }

                             catch (Exception ex)
                            {
                                Console.WriteLine("Data transfer failed");
                                throw new Exception(
                                        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                      command, ex.Message));
                            }

                        }

                    }


                    break;

                case 5:
                    string MalScan = "/C nmap nmap --script malware -T4 -oX MSresults.xml ";
                    string Malcmd = string.Concat(MalScan, ScanData.IPValue);

                    System.Diagnostics.Process Malprocess = new System.Diagnostics.Process();
                    System.Diagnostics.ProcessStartInfo MalstartInfo = new System.Diagnostics.ProcessStartInfo();
                    MalstartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    MalstartInfo.FileName = "cmd.exe";
                    MalstartInfo.Arguments = Malcmd;
                    Malprocess.StartInfo = MalstartInfo;
                    Malprocess.Start();
                    Malprocess.WaitForExit();

                    XDocument MSxmlDoc = XDocument.Load("MSResults.xml");

                    var MShosts = MSxmlDoc.Root.Elements("host");
                    var MSporta = MSxmlDoc.Root.Elements("ports");
                    var MSportb = MSxmlDoc.Root.Elements("port");
                    var MSrunstatsa = MSxmlDoc.Root.Elements("runstats");
                    XmlDocument MSxdoc = new XmlDocument();

                    //Perhaps if OS is outdated recommend that the uprades to the latest OS

                    MSxdoc.Load(@"VSResults.xml");

                    XmlElement MSxelRoot = MSxdoc.DocumentElement;
                    XmlNodeList MSxnlNodes = MSxelRoot.SelectNodes("/nmaprun");
                    XmlNodeList MSportsNodes = MSxelRoot.SelectNodes("/nmaprun/host/ports");
                    XmlNodeList MSportNodes = MSxelRoot.SelectNodes("/nmaprun/host/ports/port");

                    foreach (XmlNode MSxndNode in MSxnlNodes)
                    {

                        var ScannedIP = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='ipv4']")).GetAttribute("addr");
                        ScanIP = ScannedIP;
                        var ScannedMac = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("addr");
                        ScanMac = ScannedMac;
                        var ScannedVendor = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/address[@addrtype='mac']")).GetAttribute("vendor");
                        ScanVendor = ScannedVendor;
                        var ScannedHostname = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/hostnames") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/hostnames")).GetAttribute("name");
                        ScanHostname = ScannedHostname;
                        var ScannedExtraPorts = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/extraports[@state='closed']")).GetAttribute("count");
                        ExtraScanPorts = ScannedExtraPorts;

                        foreach (XmlNode MSportNodesa in MSportsNodes)
                        {
                            var ScannedPorts = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/ports/port")).GetAttribute("portid");
  
                            portList.Add(ScannedPorts);
                            ScanPorts = ScannedPorts;
                        }
                        //IPList.Add(ScannedIP);
                        NestedPortList.Add(portList);
                        //MacList.Add(ScannedMac);
                        //OSList.Add(vendor);
                        //HostNameList.Add(ScanHostname);

                        foreach (XElement MShost in MShosts)
                        {
                            var ScannedOS = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch")).GetAttribute("name");
                            ScanOS = ScannedOS;
                            var ScannedOSFamily = ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass") == null) ? "Null" : ((XmlElement)MSxndNode.SelectSingleNode("/nmaprun/host/os/osmatch/osclass")).GetAttribute("osfamily");
                            //currently says embedded 
                            ScanOSFamily = ScannedOSFamily;

                        }
                        foreach (XElement MSrunstats in MSrunstatsa)
                        {
                            ScanCompletionTime = (string)MSrunstats.Descendants("finished")
                                    .FirstOrDefault().Attribute("timestr");
                        }
                        
                        var cmdString = "INSERT INTO scannerdbmk3.Malcandata(ScanIP, ScanVendor, ScanOS, ScanOSFamily, ScanMAC, ScanHostname, ScanPorts, ScanCompletionTime) " +
                            "VALUES(@ScanIP, @ScanVendor, @ScanOS, @ScanOSFamily, @ScanMAC, @ScanHostname, @ScanPorts, @ScanCompletionTime)";
                        using (MySqlCommand command = new MySqlCommand(cmdString, conn))
                        {

                            try
                            {
                                command.Parameters.AddWithValue("@ScanIP", ScanIP);
                                command.Parameters.AddWithValue("@ScanVendor", ScanVendor);
                                command.Parameters.AddWithValue("@ScanOS", ScanOS);
                                command.Parameters.AddWithValue("@ScanOSFamily", ScanOSFamily);
                                command.Parameters.AddWithValue("@ScanMAC", ScanMac);
                                command.Parameters.AddWithValue("@ScanHostname", ScanHostname);
                                command.Parameters.AddWithValue("@ScanPorts", ScanPorts);
                                command.Parameters.AddWithValue("@ClosedPorts", ExtraScanPorts);
                                command.Parameters.AddWithValue("@ScanCompletionTime", ScanCompletionTime);
                                conn.Open();
                                command.ExecuteNonQuery();

                                Console.WriteLine("Data transfer successful");
                                conn.Close();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Data transfer failed");
                                throw new Exception(
                                        String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                                      command, ex.Message));
                            }

                        }

                    }

                    break;
                    
                default:

                break;

            }

            //if (ScanData == null)
            //{
            //    return Page();
            //}

            return RedirectToPage("./Scan");
        }

        private void ParseDSData()
        {

            throw new NotImplementedException();
        }
    }

}
