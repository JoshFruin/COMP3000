using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using MySql.Data.MySqlClient;
using static Achilles_Vulnerability_Scanner_Website.Pages.IndexModel;

namespace Achilles_Vulnerability_Scanner_Website.Pages.DbActions
{
    public class EditVulnModel : PageModel
    {
        public VulnData VulnData = new VulnData();
        public String errorMessage = "";
        public String successMessage = "";
        public void OnGet()
        {
            String VSID = Request.Query["VSID"];
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                using (MySqlConnection conn = new MySqlConnection(constring))
                {
                    conn.Open();
                    var VScmdString = "SELECT * FROM scannerdbmk3.vulnscandata WHERE VSID=@VSID";
                    using (MySqlCommand command = new MySqlCommand(VScmdString, conn))
                    {
                        command.Parameters.AddWithValue("@VSID", VSID);
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            try
                            {
                                if (reader.Read())
                                {
                                    VulnData.VSID = "" + reader.GetInt32(0);
                                    VulnData.ScanIP = reader.GetString(1);
                                    //VulnData.ScannedKey = reader.GetString(2);
                                    //VulnData.ScannedKeyState = reader.GetString(3);
                                    VulnData.ScanVendor = reader.GetString(4);
                                    VulnData.ScanMAC = reader.GetString(5);
                                    VulnData.ScanHostname = reader.GetString(6);
                                    VulnData.ScanPorts = reader.GetString(7);
                                    VulnData.ClosedPorts = reader.GetString(8);
                                    VulnData.ScanCompletionTime = reader.GetString(9);
                                }
                            }

                            catch (Exception ex)
                            {
                                errorMessage = ex.Message;
                                Console.WriteLine(errorMessage);
                                Console.WriteLine(ex.StackTrace);
                            }
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                Console.WriteLine(errorMessage);
                Console.WriteLine(ex.StackTrace);
            }
        }

        public void OnPost()
        {
            VulnData.VSID = Request.Form["VSID"];
            VulnData.ScanIP = Request.Form["ScanIP"];
            //VulnData.ScannedKey = Request.Form["Scankey"];
            //VulnData.ScannedKeyState = Request.Form["ScanKeyState"];
            VulnData.ScanVendor = Request.Form["ScanVendor"];
            VulnData.ScanMAC = Request.Form["ScanMAC"];
            VulnData.ScanHostname = Request.Form["ScanHostname"];
            VulnData.ScanPorts = Request.Form["ScanPorts"];
            VulnData.ClosedPorts = Request.Form["ClosedPorts"];
            VulnData.ScanCompletionTime = Request.Form["ScanCompletionTime"];

            if (VulnData.VSID.Length == 0 || VulnData.ScanIP.Length == 0 || VulnData.ScanVendor.Length == 0 || VulnData.ScanMAC.Length == 0 ||
                VulnData.ScanHostname.Length == 0 || VulnData.ScanPorts.Length == 0 || VulnData.ClosedPorts.Length == 0 ||
                VulnData.ScanCompletionTime.Length == 0) 
            {
                errorMessage = "  fields are required to be filled";
                return;
            }

            //Alters Database with new user entered data
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                MySqlConnection conn = new MySqlConnection(constring);
                
                var VScmdString = "UPDATE scannerdbmk3.vulnscandata SET ScanIP=@ScanIP, ScanVendor=@ScanVendor, ScanMAC=@ScanMAC, ScanHostname=@ScanHostname, ScanPorts=@ScanPorts, ClosedPorts=@ClosedPorts, ScanCompletionTime=@ScanCompletionTime" + //ScannedKey=@ScannedKey, ScannedKeyState=@ScannedKeyState,
                    " WHERE VSID=@VSID";

                using (MySqlCommand command = new MySqlCommand(VScmdString, conn))
                {
                    //Parsed values are inserted into the database if an error occurs the user will get an error
                    try
                    {
                        command.Parameters.AddWithValue("@VSID", VulnData.VSID);
                        command.Parameters.AddWithValue("@ScanIP", VulnData.ScanIP);
                        //command.Parameters.AddWithValue("@ScannedKey", VulnData.ScannedKey);
                        //command.Parameters.AddWithValue("@ScannedKeyState", VulnData.ScannedKeyState);
                        command.Parameters.AddWithValue("@ScanVendor", VulnData.ScanVendor);
                        command.Parameters.AddWithValue("@ScanMAC", VulnData.ScanMAC);
                        command.Parameters.AddWithValue("@ScanHostname", VulnData.ScanHostname);
                        command.Parameters.AddWithValue("@ScanPorts", VulnData.ScanPorts);
                        command.Parameters.AddWithValue("@ClosedPorts", VulnData.ClosedPorts);
                        command.Parameters.AddWithValue("@ScanCompletionTime", VulnData.ScanCompletionTime);
                        conn.Open();
                        command.ExecuteNonQuery();

                        Console.WriteLine("Data transfer successful");
                        //conn.Close();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Data transfer failed");
                        throw new Exception(
                                String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                              command, ex.Message));
                    }

                }
            }

            catch (Exception ex)
            {
                errorMessage = ex.Message;
                return;
            }
            VulnData.VSID = ""; VulnData.ScanIP = ""; VulnData.ScanVendor = ""; VulnData.ScanMAC = "";
            VulnData.ScanHostname = ""; VulnData.ScanPorts = ""; VulnData.ClosedPorts = "";
            VulnData.ScanCompletionTime = ""; //VulnData.ScannedKey = ""; VulnData.ScannedKeyState = "";
            successMessage = "Data Altered";
            Response.Redirect("/ScanDatabase");
        }
    }
}

