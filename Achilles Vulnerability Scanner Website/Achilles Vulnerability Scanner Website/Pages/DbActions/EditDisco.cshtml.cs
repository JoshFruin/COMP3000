using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using MySql.Data.MySqlClient;
using static Achilles_Vulnerability_Scanner_Website.Pages.IndexModel;

namespace Achilles_Vulnerability_Scanner_Website.Pages.DbActions
{
    public class EditDiscoModel : PageModel
    {
        public DSData DSData = new DSData();
        public String errorMessage = "";
        public String successMessage = "";
        public void OnGet()
        {
            String DiscoID = Request.Query["DiscoID"];
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                using (MySqlConnection conn = new MySqlConnection(constring))
                {
                    conn.Open();
                    var DScmdString = "SELECT * FROM scannerdbmk3.discoscandata WHERE DiscoID=@DiscoID";
                    using (MySqlCommand command = new MySqlCommand(DScmdString, conn))
                    {
                        command.Parameters.AddWithValue("@DiscoID", DiscoID);
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            try
                            {
                                if (reader.Read())
                                {
                                    DSData.DiscoID = "" + reader.GetInt32(0);
                                    DSData.ScanIP = reader.GetString(1);
                                    DSData.ScanVendor = reader.GetString(2);
                                    DSData.ScanMAC = reader.GetString(3);
                                    DSData.ScanHostname = reader.GetString(4);
                                    DSData.ScanPorts = reader.GetString(5);
                                    DSData.ScanCompletionTime = reader.GetString(6);
                                }
                            }

                            catch (Exception ex)
                            {
                                errorMessage = ex.Message;
                                Console.WriteLine(errorMessage);
                                Console.WriteLine(ex.StackTrace);
                            }                          
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                Console.WriteLine(errorMessage);
                Console.WriteLine(ex.StackTrace);
            }
        }

        public void OnPost()
        {
            DSData.DiscoID = Request.Form["QSID"];
            DSData.ScanIP = Request.Form["ScanIP"];
            DSData.ScanVendor = Request.Form["ScanVendor"];
            DSData.ScanMAC = Request.Form["ScanMAC"];
            DSData.ScanHostname = Request.Form["ScanHostname"];
            DSData.ScanPorts = Request.Form["ScanPorts"];
            DSData.ScanCompletionTime = Request.Form["ScanCompletionTime"];
            //QSdata.VulnerabilityScore = Request.Form["VulnerabilityScore"];

            if (DSData.DiscoID.Length == 0 || DSData.ScanIP.Length == 0 || DSData.ScanVendor.Length == 0 || DSData.ScanMAC.Length == 0 ||
                DSData.ScanHostname.Length == 0 || DSData.ScanPorts.Length == 0 || DSData.ScanCompletionTime.Length == 0) 
            {
                errorMessage = "  fields are required to be filled";
                return;
            }

            //Alters Database with new user entered data
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                MySqlConnection conn = new MySqlConnection(constring);

                var QScmdString = "UPDATE scannerdbmk3.discoscandata SET ScanIP=@ScanIP, ScanVendor=@ScanVendor, ScanMAC=@ScanMAC, ScanHostname=@ScanHostname, ScanPorts=@ScanPorts, ScanCompletionTime=@ScanCompletionTime" + 
                    " WHERE DiscoID=@DiscoID";

                using (MySqlCommand command = new MySqlCommand(QScmdString, conn))
                {
                    //Parsed values are inserted into the database if an error occurs the user will get an error
                    try
                    {
                        command.Parameters.AddWithValue("@DiscoID", DSData.DiscoID);
                        command.Parameters.AddWithValue("@ScanIP", DSData.ScanIP);
                        command.Parameters.AddWithValue("@ScanVendor", DSData.ScanVendor);
                        command.Parameters.AddWithValue("@ScanMAC", DSData.ScanMAC);
                        command.Parameters.AddWithValue("@ScanHostname", DSData.ScanHostname);
                        command.Parameters.AddWithValue("@ScanPorts", DSData.ScanPorts);
                        command.Parameters.AddWithValue("@ScanCompletionTime", DSData.ScanCompletionTime);
                        conn.Open();
                        command.ExecuteNonQuery();

                        Console.WriteLine("Data transfer successful");
                    }
                    catch (Exception ex)
                    {
                        //Perhaps do a pop-up in case any errors occur?
                        Console.WriteLine("Data transfer failed");
                        throw new Exception(
                                String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                              command, ex.Message));
                    }

                }
            }

            catch (Exception ex)
            {
                errorMessage = ex.Message;
                return;
            }
            DSData.DiscoID = ""; DSData.ScanIP = ""; DSData.ScanVendor = ""; DSData.ScanMAC = "";
            DSData.ScanHostname = ""; DSData.ScanPorts = ""; DSData.ScanCompletionTime = ""; 
            successMessage = "Data Altered";
            Response.Redirect("/ScanDatabase");
        }
    }
}
