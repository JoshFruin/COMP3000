using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using static Achilles_Vulnerability_Scanner_Website.Pages.IndexModel;
using MySql.Data.MySqlClient;

namespace Achilles_Vulnerability_Scanner_Website.Pages
{
    public class EditModel : PageModel
    {
        public QSData QSdata = new QSData();
        public String errorMessage = "";
        public String successMessage = "";
        public void OnGet()
        {
            String QSID = Request.Query["QSID"];
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                using (MySqlConnection conn = new MySqlConnection(constring))
                {
                    conn.Open();
                    var QScmdString = "SELECT * FROM scannerdbmk3.quickscandata WHERE QSID=@QSID";
                    using (MySqlCommand command = new MySqlCommand(QScmdString, conn))
                    {
                        command.Parameters.AddWithValue("@QSID", QSID);
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            try
                            {

                            }

                            catch (Exception ex)
                            {
                                errorMessage = ex.Message;
                                Console.WriteLine(errorMessage);
                                Console.WriteLine(ex.StackTrace);
                            }
                            if (reader.Read())
                            {
                                QSdata.QSID = "" + reader.GetInt32(0);
                                QSdata.ScanIP = reader.GetString(1);
                                QSdata.ScanVendor = reader.GetString(2);
                                QSdata.ScanOS = reader.GetString(3);
                                QSdata.ScanMAC = reader.GetString(4);
                                QSdata.ScanHostname = reader.GetString(5);
                                QSdata.ScanPorts = reader.GetString(6);
                                QSdata.ClosedPorts = reader.GetString(7);
                                QSdata.ScanCompletionTime = reader.GetString(8);
                                //QSdata.VulnerabilityScore = reader.GetString(9);
                            }
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                Console.WriteLine(errorMessage);
                Console.WriteLine(ex.StackTrace);
            }
        }

        public void OnPost()
        {
            QSdata.QSID = Request.Form["QSID"];
            QSdata.ScanIP = Request.Form["ScanIP"];
            QSdata.ScanVendor = Request.Form["ScanVendor"];
            QSdata.ScanOS = Request.Form["ScanOS"];
            QSdata.ScanMAC = Request.Form["ScanMAC"];
            QSdata.ScanHostname = Request.Form["ScanHostname"];
            QSdata.ScanPorts = Request.Form["ScanPorts"];
            QSdata.ClosedPorts = Request.Form["ClosedPorts"];
            QSdata.ScanCompletionTime = Request.Form["ScanCompletionTime"];
            //QSdata.VulnerabilityScore = Request.Form["VulnerabilityScore"];

            if (QSdata.QSID.Length == 0 || QSdata.ScanIP.Length == 0 || QSdata.ScanVendor.Length == 0 || QSdata.ScanOS.Length == 0 || QSdata.ScanMAC.Length == 0 ||
                QSdata.ScanHostname.Length == 0 || QSdata.ScanPorts.Length == 0 || QSdata.ClosedPorts.Length == 0 ||
                QSdata.ScanCompletionTime.Length == 0) //QSdata.VulnerabilityScore != null || QSdata.VulnerabilityScore.Equals(null)
            {
                errorMessage = "  fields are required to be filled";
                return;
            }

            //Alters Database with new user entered data
            try
            {
                string constring = "server=localhost;database=scannerdbmk3;uid=root;pwd=C4bbages!;AllowUserVariables=True;";
                MySqlConnection conn = new MySqlConnection(constring);

                var QScmdString = "UPDATE scannerdbmk3.quickscandata SET ScanIP=@ScanIP, ScanVendor=@ScanVendor, ScanOS=@ScanOS, ScanMAC=@ScanMAC, ScanHostname=@ScanHostname, ScanPorts=@ScanPorts, ClosedPorts=@ClosedPorts, ScanCompletionTime=@ScanCompletionTime" + //, VulnerabilityScore=@VulnerabilityScore
                    " WHERE QSID=@QSID";

                using (MySqlCommand command = new MySqlCommand(QScmdString, conn))
                {
                    //Parsed values are inserted into the database if an error occurs the user will get an error
                    try
                    {
                        command.Parameters.AddWithValue("@QSID", QSdata.QSID);
                        command.Parameters.AddWithValue("@ScanIP", QSdata.ScanIP);
                        command.Parameters.AddWithValue("@ScanVendor", QSdata.ScanVendor);
                        command.Parameters.AddWithValue("@ScanOS", QSdata.ScanOS);
                        command.Parameters.AddWithValue("@ScanMAC", QSdata.ScanMAC);
                        command.Parameters.AddWithValue("@ScanHostname", QSdata.ScanHostname);
                        command.Parameters.AddWithValue("@ScanPorts", QSdata.ScanPorts);
                        command.Parameters.AddWithValue("@ClosedPorts", QSdata.ClosedPorts);
                        command.Parameters.AddWithValue("@ScanCompletionTime", QSdata.ScanCompletionTime);
                        //command.Parameters.AddWithValue("@VulnerabilityScore", QSdata.VulnerabilityScore);
                        conn.Open();
                        command.ExecuteNonQuery();

                        Console.WriteLine("Data transfer successful");
                        //conn.Close();
                    }
                    catch (Exception ex)
                    {
                        //Perhaps do a pop-up in case any errors occur?
                        Console.WriteLine("Data transfer failed");
                        throw new Exception(
                                String.Format("Error executing the command '{0}'. The error is '{1}'.",
                                              command, ex.Message));
                    }

                }
            }
            
            catch (Exception ex)
            {
                errorMessage= ex.Message;
                return;
            }
            QSdata.QSID = ""; QSdata.ScanIP = ""; QSdata.ScanVendor = ""; QSdata.ScanOS = ""; QSdata.ScanMAC = "";
            QSdata.ScanHostname = ""; QSdata.ScanPorts = ""; QSdata.ClosedPorts = "";
            QSdata.ScanCompletionTime = ""; //QSdata.VulnerabilityScore = "";
            successMessage = "Data Altered";
            Response.Redirect("/ScanDatabase");
        }
    }
}
